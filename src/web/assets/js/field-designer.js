/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 6);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./development/js/field-designer.js":
/*!******************************************!*\
  !*** ./development/js/field-designer.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var LD_Fields;\nLD_Fields = {\n  setup: function setup() {}\n};\nLD_Fields = new (Garnish.Base.extend({\n  fields: null,\n  options: null,\n  init: function init() {\n    this.fields = {};\n    this.options = {};\n  },\n  setup: function setup() {\n    var self;\n    var FLD;\n    var FLD_init;\n    var FLD_field;\n    var FLD_fieldOptions;\n    self = this;\n\n    if (Craft.FieldLayoutDesigner) {\n      FLD = Craft.FieldLayoutDesigner;\n      FLD_init = FLD.prototype.init;\n      FLD_field = FLD.prototype.initField;\n      FLD_fieldOptions = FLD.prototype.onFieldOptionSelect;\n\n      FLD.prototype.init = function () {\n        FLD_init.apply(this, arguments);\n        this.fieldEditor = new FieldEditor(this);\n      };\n\n      FLD.prototype.initField = function ($field) {\n        var $preview;\n        var $editBtn;\n        var $html;\n        var $menu;\n        var $ul;\n        var menu;\n        var menuBtn;\n        FLD_field.apply(this, arguments);\n        $editBtn = $field.find('.settings');\n        menuBtn = $editBtn.data('menubtn');\n        menu = menuBtn.menu;\n        $menu = menu.$container;\n        $ul = $menu.children('ul');\n        $html = $('<li><a data-action=\"fieldoptions\">' + Craft.t('form-builder', 'Options') + '</a></li>').appendTo($ul);\n        $preview = $(['<div class=\"field-options-preview\">', '</div>'].join('')).appendTo($field);\n        return menu.addOptions($html.children('a'));\n      };\n\n      FLD.prototype.onFieldOptionSelect = function (option) {\n        var $field;\n        var $option;\n        var action;\n        FLD_fieldOptions.apply(this, arguments);\n        $option = $(option);\n        $field = $option.data('menu').$anchor.parent();\n        action = $option.data('action');\n\n        switch (action) {\n          case 'fieldoptions':\n            this.trigger('fieldOptionsSelected', {\n              target: $option[0],\n              $target: $option,\n              $field: $field,\n              fld: this,\n              id: $field.data('id') | 0\n            });\n        }\n      };\n    }\n  },\n  getOptions: function getOptions(layoutId) {\n    var options;\n    options = {};\n    $.each(this.options, function (key, item) {\n      if (parseInt(item.fieldLayoutId) == layoutId) {\n        options[item.fieldId] = item.options;\n      }\n    });\n    return options;\n  }\n}))();\nFieldEditor = Garnish.Base.extend({\n  fld: null,\n  options: null,\n  layoutId: null,\n  namespace: 'form-builder',\n  init: function init(fld) {\n    this.fld = fld;\n    this.layoutId = LD.getLayoutId();\n    this.options = LD_Fields.getOptions(this.layoutId);\n    this.fld.on('fieldOptionsSelected', $.proxy(this.openOptionsModal, this));\n\n    if (this.layoutId !== false) {\n      this.applyOptions(this.layoutId);\n    }\n  },\n  applyOptions: function applyOptions(layoutId) {\n    var _this = this;\n\n    var results;\n\n    if (this.options) {\n      results = [];\n      $.each(this.options, function (key, value) {\n        if (_this.options.hasOwnProperty(key)) {\n          options = JSON.parse(_this.options[key]);\n          results.push(_this.setFormData(key, JSON.parse(value)));\n        } else {\n          results.push(void 0);\n        }\n      });\n      return results;\n    }\n  },\n  openOptionsModal: function openOptionsModal(e) {\n    var self;\n    var formId;\n    var modal;\n    self = this;\n    formId = e.id;\n    modal = new FieldOptionsModal(e);\n    modal.on('setOptions', function (e) {\n      return self.setFormData(formId, e.options);\n    });\n    modal.show(this.options);\n  },\n  setFormData: function setFormData(fieldId, options) {\n    var self;\n    var $container;\n    var $field;\n    var name;\n    self = this;\n    $container = this.fld.$container;\n    $field = $container.find('.fld-field[data-id=\"' + fieldId + '\"]:not(\".unused\")');\n    name = this.namespace + '[field][' + fieldId + '][options]';\n    $.each(options, function (key, item) {\n      if ($field.children(\"input[name=\\\"\".concat(name, \"[\").concat(key, \"]\\\"]\")).length > 0) {\n        if (item) {\n          $field.children(\"input[name=\\\"\".concat(name, \"[\").concat(key, \"]\\\"]\")).val(item);\n          self.updatePreview($field, key, item);\n        } else {\n          $field.children(\"input[name=\\\"\".concat(name, \"[\").concat(key, \"]\\\"]\")).remove();\n          self.removePreview($field, key, item);\n        }\n      } else {\n        if (item) {\n          self.updatePreview($field, key, item);\n          $(\"<input type=\\\"hidden\\\" name=\\\"\".concat(name, \"[\").concat(key, \"]\\\">\")).val(item).appendTo($field);\n        }\n      }\n    });\n  },\n  updatePreview: function updatePreview(field, type, value) {\n    body = field.find('.field-options-preview');\n    markup = $('<div class=\"field-' + type + '-preview\"><span class=\"preview-type\">' + type + '</span> ' + value + '</div>');\n    oldMarkup = body.find('.field-' + type + '-preview');\n\n    if (oldMarkup) {\n      oldMarkup.remove();\n    }\n\n    markup.appendTo(body);\n  },\n  removePreview: function removePreview(field, type, value) {\n    field.find('.field-' + type + '-preview').remove();\n  }\n});\nFieldOptionsModal = Garnish.Modal.extend({\n  field: null,\n  $formContainer: null,\n  $classInput: null,\n  $idInput: null,\n  $templateInput: null,\n  init: function init(field) {\n    var body;\n    this.field = field;\n    this.base();\n    this.$formContainer = $('<form class=\"modal fitted formbuilder-modal has-sidebar\">').appendTo(Garnish.$bod);\n    this.setContainer(this.$formContainer); // TODO: make translatable text\n\n    body = $(['<div class=\"header\">', \"<h1>\".concat(Craft.t('form-builder', 'Field Options'), \"</h1>\"), '</div>', '<div class=\"body\">', '<div class=\"field\">', '<div class=\"heading\">', \"<label for=\\\"input-class\\\">\".concat(Craft.t('form-builder', 'Class'), \"</label>\"), '</div>', '<div class=\"input\">', '<input type=\"text\" id=\"input-class\" class=\"text ltr fullwidth input-class\">', '</div>', '</div>', '<div class=\"field\">', '<div class=\"heading\">', \"<label for=\\\"input-id\\\">\".concat(Craft.t('form-builder', 'ID'), \"</label>\"), '</div>', '<div class=\"input\">', '<input type=\"text\" id=\"input-id\" class=\"text ltr fullwidth input-id\">', '</div>', '</div>', '<div class=\"field\">', '<div class=\"heading\">', \"<label for=\\\"input-template\\\">\".concat(Craft.t('form-builder', 'Custom Template'), \"</label>\"), '</div>', '<div class=\"input\">', '<input type=\"text\" id=\"input-template\" class=\"text ltr fullwidth input-template\">', '</div>', '</div>', '</div>', '<div class=\"footer\">', '<div class=\"buttons\">', \"<input type=\\\"button\\\" class=\\\"btn cancel\\\" value=\\\"\".concat(Craft.t('form-builder', 'Cancel'), \"\\\">\"), \"<input type=\\\"submit\\\" class=\\\"btn submit\\\" value=\\\"\".concat(Craft.t('form-builder', 'Save'), \"\\\">\"), '</div>', '</div>'].join('')).appendTo(this.$formContainer);\n    this.$classInput = body.find('.input-class');\n    this.$idInput = body.find('.input-id');\n    this.$templateInput = body.find('.input-template');\n    this.$navLink = body.find('.modal-nav');\n    this.$cancelBtn = body.find('.cancel');\n    this.loadModalValues();\n    this.addListener(this.$cancelBtn, 'click', 'hide');\n    this.addListener(this.$navLink, 'click', 'toggleModalContent');\n    this.addListener(this.$formContainer, 'submit', 'onFormSubmit');\n  },\n  loadModalValues: function loadModalValues() {\n    $classInput = $('input[name=\"form-builder[field][' + this.field.id + '][options][class]\"]').val();\n    $idInput = $('input[name=\"form-builder[field][' + this.field.id + '][options][id]\"]').val();\n    $templateInput = $('input[name=\"form-builder[field][' + this.field.id + '][options][template]\"]').val();\n\n    if ($classInput) {\n      this.$formContainer.find('.input-class').val($classInput);\n    }\n\n    if ($idInput) {\n      this.$formContainer.find('.input-id').val($idInput);\n    }\n\n    if ($templateInput) {\n      this.$formContainer.find('.input-template').val($templateInput);\n    }\n  },\n  toggleModalContent: function toggleModalContent(e) {\n    var _this2 = this;\n\n    e.preventDefault();\n    var target;\n    var link;\n    var height;\n    link = $(e.currentTarget);\n    target = link.data('target');\n    height = $('.' + target).height() + 53;\n    $('.modal-nav').removeClass('active');\n    $('.modal-content').removeClass('active');\n    link.addClass('active');\n    $('.' + target).addClass('active');\n    this.$container.velocity('stop');\n    this.$container.velocity({\n      height: height\n    }, 'fast', function () {\n      _this2.$container.css({\n        height: height,\n        minHeight: 'auto'\n      });\n    });\n  },\n  onFormSubmit: function onFormSubmit(e) {\n    e.preventDefault();\n\n    if (!this.visible) {\n      return;\n    }\n\n    this.trigger('setOptions', {\n      options: {\n        \"class\": this.$classInput.val(),\n        id: this.$idInput.val(),\n        template: this.$templateInput.val()\n      }\n    });\n    this.hide();\n  },\n  onFadeOut: function onFadeOut() {\n    this.base();\n    this.destroy();\n  },\n  destroy: function destroy() {\n    this.base();\n    this.$container.remove();\n    this.$shade.remove();\n  },\n  show: function show(options) {\n    var self;\n    var values;\n    self = this;\n\n    if (options.length > 0) {\n      values = JSON.parse(options[this.field.id]);\n      $.each(values, function (key, value) {\n        if (key == 'class' && value) {\n          self.$classInput.val(value);\n        }\n\n        if (key == 'id' && value) {\n          self.$idInput.val(value);\n        }\n      });\n\n      if (!Garnish.isMobileBrowser()) {\n        setTimeout($.proxy(function () {\n          this.$classInput.focus();\n        }));\n      }\n    }\n\n    this.base();\n  }\n});\nwindow.LD_Fields = LD_Fields;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./development/js/field-designer.js\n");

/***/ }),

/***/ 6:
/*!************************************************!*\
  !*** multi ./development/js/field-designer.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Users/owldesign/Formbuilder/plugins/formbuilder/development/js/field-designer.js */"./development/js/field-designer.js");


/***/ })

/******/ });