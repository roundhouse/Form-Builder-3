/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!*********************************!*\
  !*** ./development/js/modal.js ***!
  \*********************************/
eval("function isToggler(item) {\n  console.log(item);\n}\n\nvar OptionModal;\nwindow.OptionModal = Garnish.Modal.extend({\n  option: null,\n  $form: null,\n  $modalInputs: null,\n  $redactor: null,\n  $validationItems: [],\n  $togglerInput: null,\n  hasTogglers: false,\n  errors: [],\n  errorLength: 0,\n  init: function init(option) {\n    var body, fields, self;\n    self = this;\n    this.option = option;\n    this.base();\n    this.$form = $('<form class=\"modal fitted formbuilder-modal\">').appendTo(Garnish.$bod);\n    this.setContainer(this.$form);\n    body = $(['<header>', '<span class=\"modal-title\">', option.$data.title, '</span>', '<div class=\"instructions\">', option.$data.instructions, '</div>', '</header>', '<div class=\"body\"></div>', '<footer class=\"footer\">', '<div class=\"buttons\">', '<input type=\"button\" class=\"btns btn-modal cancel\" value=\"' + Craft.t('form-builder', 'Cancel') + '\">', '<input type=\"submit\" class=\"btns btn-modal submit\" value=\"' + Craft.t('form-builder', 'Save') + '\">', '</div>', '</footer>'].join('')).appendTo(this.$form);\n    toggler = option.$inputs.some(function (elem) {\n      return elem.toggler;\n    });\n    this.hasTogglers = toggler;\n    $.each(option.$inputs, function (i, item) {\n      var $input, camelClassName, className, required, validation;\n      required = item.required ? 'data-required' : 'data-not-required';\n\n      if (item.toggler) {\n        self.$togglerInput = item;\n      }\n\n      if (item.type !== 'checkbox' && !item.toggler) {\n        className = item.name.replace(/[_\\W]+/g, \"-\").slice(0, -1);\n        camelClassName = className.replace(/-([a-z])/g, function (g) {\n          return g[1].toUpperCase();\n        });\n\n        if (item.validation) {\n          validation = item.validation;\n          validation['passed'] = false;\n          validation['inputClass'] = className;\n          self.$validationItems[i] = item;\n        }\n\n        if (item.type === 'textarea') {\n          $input = \"<textarea class='\" + className + \" \" + required + \"' value='\" + item.value + \"' data-hint='\" + item.hint + \"' data-name='\" + item.name + \"' \" + required + \" />\" + item.value + \"</textarea>\";\n        } else if (item.type === 'select') {\n          $input = $.parseJSON(item.options);\n        } else {\n          $input = \"<input type='\" + item.type + \"' class='\" + className + \" \" + required + \"' value='\" + item.value + \"' data-hint='\" + item.hint + \"' data-name='\" + item.name + \"' \" + required + \" />\";\n        }\n\n        return self.renderInputs(required, $input, item.value, item.type, item.name, item.hint, className);\n      }\n    });\n\n    if (this.option.$container.hasClass('has-fields')) {\n      fields = new Fields(this.option, this.$form);\n    }\n\n    this.$modalInputs = this.$form.find('.body').find('input, textarea, select');\n\n    if (this.$togglerInput) {\n      this.activateFieldToggle();\n    }\n\n    this.show();\n    this.$saveBtn = body.find('.submit');\n    this.$cancelBtn = body.find('.cancel');\n    this.addListener(this.$cancelBtn, 'click', 'cancel');\n    return this.addListener(this.$form, 'submit', 'save');\n  },\n  activateFieldToggle: function activateFieldToggle() {\n    var $toggler;\n    var item;\n    $toggler = this.$form.find('.toggle-btn');\n\n    if (this.$togglerInput.value) {\n      item = this.$form.find('[data-selection-target=\"' + this.$togglerInput.value + '\"]');\n      item.parent().addClass('active-field');\n    } else {\n      $($toggler[0]).parent().addClass('active-field');\n      target = $($toggler[0]).data('selection-target');\n      input = $('input[name=\"' + this.$togglerInput.name + '\"]');\n      input.val(target);\n    }\n\n    $toggler.on('click', $.proxy(function (e) {\n      var input;\n      var target;\n      $toggler.parent().removeClass('active-field');\n      this.disableField($(e.target).parent().parent().find('input'));\n      this.disableField($(e.target).parent().parent().find('select'));\n      $(e.target).parent().addClass('active-field');\n      this.enableField($(e.target).parent().find('input'));\n      this.enableField($(e.target).parent().find('select'));\n      target = $(e.target).data('selection-target');\n      input = $('input[name=\"' + this.$togglerInput.name + '\"]');\n      input.val(target);\n    }, this));\n  },\n  disableField: function disableField(target) {\n    target.prop('disabled', true);\n    target.val('');\n  },\n  enableField: function enableField(target) {\n    target.prop('disabled', false);\n  },\n  renderInputs: function renderInputs(required, el, value, type, name, hint, className) {\n    var $input, togglerClass;\n    togglerClass = this.hasTogglers ? 'toggle-field' : '';\n\n    if (type === 'select') {\n      $input = $('<div class=\"fb-field ' + togglerClass + '\">' + '<div class=\"input-hint\">' + hint + '</div>' + '<div class=\"select input\"><select class=\"' + className + ' ' + required + '\" data-hint=\"' + hint + '\" data-name=\"' + name + '\" /></div>' + '</div>');\n      $.each(el, function (i, item) {\n        $input.find('select').append($('<option>', {\n          value: item.value,\n          text: item.label\n        }));\n      });\n      $input.find('select').val(value);\n    } else {\n      $input = $('<div class=\"fb-field ' + togglerClass + '\">' + '<div class=\"input-hint\">' + hint + '</div>' + '<div class=\"input\">' + el + '</div>' + '</div>');\n    }\n\n    if (this.hasTogglers) {\n      $input.append($('<div class=\"toggle-btn\" data-selection-target=\"' + hint.toLowerCase() + '\"></div>'));\n    }\n\n    this.$form.find('.body').append($input); // if (type === 'textarea') {\n    //     return this.initRedactor(el);\n    // }\n  },\n  initRedactor: function initRedactor(item) {\n    var className, el;\n    className = $(item)[0].className;\n    el = this.$form.find(\".\" + className);\n    el.redactor({\n      maxHeight: 160,\n      minHeight: 150,\n      maxWidth: '400px',\n      buttons: ['bold', 'italic', 'link', 'horizontalrule'],\n      plugins: ['fontfamily', 'fontsize', 'alignment', 'fontcolor']\n    });\n    return this.$redactor = el.redactor('core.object');\n  },\n  cancel: function cancel() {\n    if (!this.option.editing) {\n      this.option.$edit.addClass('hidden');\n      this.option.$container.removeClass('option-enabled');\n      this.option.$resultContainer.html('');\n      this.option.$toggle.html('ENABLE');\n      this.disableOption();\n      return this.closeModal();\n    } else {\n      return this.closeModal();\n    }\n  },\n  disableOption: function disableOption() {\n    if (this.option.$enableCheckbox) {\n      return this.option.$enableCheckbox.prop('checked', false);\n    }\n  },\n  hide: function hide() {\n    return this.cancel();\n  },\n  closeModal: function closeModal(ev) {\n    this.disable();\n\n    if (ev) {\n      ev.stopPropagation();\n    }\n\n    if (this.$container) {\n      this.$container.velocity('fadeOut', {\n        duration: Garnish.FX_DURATION\n      });\n      this.$shade.velocity('fadeOut', {\n        duration: Garnish.FX_DURATION,\n        complete: $.proxy(this, 'onFadeOut')\n      });\n\n      if (this.settings.hideOnShadeClick) {\n        this.removeListener(this.$shade, 'click');\n      }\n\n      this.removeListener(Garnish.$win, 'resize');\n    }\n\n    this.visible = false;\n    Garnish.Modal.visibleModal = null;\n\n    if (this.settings.hideOnEsc) {\n      Garnish.escManager.unregister(this);\n    }\n\n    this.trigger('hide');\n    return this.settings.onHide();\n  },\n  runValidation: function runValidation(e) {\n    var self;\n    e.preventDefault();\n    self = this;\n\n    if (this.$validationItems) {\n      return $.each(this.$validationItems, function (i, item) {\n        var input;\n        input = self.$form.find(\".\" + item.validation.inputClass);\n\n        if (input.val().match(/^\\d+$/)) {\n          return item.validation.passed = true;\n        } else {\n          item.validation.passed = false;\n          return Craft.cp.displayNotice(item.validation.errorMessage);\n        }\n      });\n    } else {\n      return this.save();\n    }\n  },\n  save: function save(e) {\n    var self;\n    e.preventDefault();\n    self = this;\n\n    if (this.option.$container.hasClass('tags')) {\n      this.checkErrors();\n\n      if (this.errors.length > 0) {\n        $.each(self.errors, function (i, item) {\n          $(item).parent().parent().addClass('error');\n        });\n        Garnish.shake(this.$container);\n      } else {\n        this.updateOption();\n      }\n    } else {\n      this.checkErrors();\n\n      if (this.errorLength === this.$modalInputs.length) {\n        $.each(self.errors, function (i, item) {\n          if ($(item).is('select')) {\n            $(item).parent().parent().addClass('error');\n          } else {\n            $(item).parent().parent().addClass('error');\n          }\n        });\n        Garnish.shake(this.$container);\n      } else {\n        this.updateOption();\n      }\n    }\n  },\n  checkErrors: function checkErrors() {\n    var self;\n    self = this;\n    this.errors = [];\n    this.errorLength = 0;\n    $.each(this.$modalInputs, function (i, item) {\n      if ($(item).hasClass('data-required')) {\n        if ($(item).val() === '') {\n          self.errors[i] = item;\n          self.errorLength += 1;\n        }\n      }\n    });\n  },\n  updateOption: function updateOption() {\n    this.option.updateHtmlFromModal();\n    this.closeModal();\n    this.$form[0].reset();\n    Craft.cp.displayNotice(this.option.$data.successMessage);\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./development/js/modal.js\n");
/******/ })()
;