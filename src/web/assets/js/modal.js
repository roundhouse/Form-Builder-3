/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 10);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./development/js/modal.js":
/*!*********************************!*\
  !*** ./development/js/modal.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function isToggler(item) {\n  console.log(item);\n}\n\nvar OptionModal;\nwindow.OptionModal = Garnish.Modal.extend({\n  option: null,\n  $form: null,\n  $modalInputs: null,\n  $redactor: null,\n  $validationItems: [],\n  $togglerInput: null,\n  hasTogglers: false,\n  errors: [],\n  errorLength: 0,\n  init: function init(option) {\n    var body, fields, self;\n    self = this;\n    this.option = option;\n    this.base();\n    this.$form = $('<form class=\"modal fitted formbuilder-modal\">').appendTo(Garnish.$bod);\n    this.setContainer(this.$form);\n    body = $(['<div class=\"header\">', '<span class=\"modal-title\">', option.$data.title, '</span>', '<div class=\"instructions\">', option.$data.instructions, '</div>', '</div>', '<div class=\"body\"></div>', '<div class=\"footer\">', '<div class=\"buttons\">', '<input type=\"button\" class=\"btn cancel\" value=\"' + Craft.t('form-builder', 'Cancel') + '\">', '<input type=\"submit\" class=\"btn submit\" value=\"' + Craft.t('form-builder', 'Save') + '\">', '</div>', '</div>'].join('')).appendTo(this.$form);\n    toggler = option.$inputs.some(function (elem) {\n      return elem.toggler;\n    });\n    this.hasTogglers = toggler;\n    $.each(option.$inputs, function (i, item) {\n      var $input, camelClassName, className, required, validation;\n      required = item.required ? 'data-required' : 'data-not-required';\n\n      if (item.toggler) {\n        self.$togglerInput = item;\n      }\n\n      if (item.type !== 'checkbox' && !item.toggler) {\n        className = item.name.replace(/[_\\W]+/g, \"-\").slice(0, -1);\n        camelClassName = className.replace(/-([a-z])/g, function (g) {\n          return g[1].toUpperCase();\n        });\n\n        if (item.validation) {\n          validation = item.validation;\n          validation['passed'] = false;\n          validation['inputClass'] = className;\n          self.$validationItems[i] = item;\n        }\n\n        if (item.type === 'textarea') {\n          $input = \"<textarea class='\" + className + \" \" + required + \"' value='\" + item.value + \"' data-hint='\" + item.hint + \"' data-name='\" + item.name + \"' \" + required + \" />\" + item.value + \"</textarea>\";\n        } else if (item.type === 'select') {\n          $input = $.parseJSON(item.options);\n        } else {\n          $input = \"<input type='\" + item.type + \"' class='\" + className + \" \" + required + \"' value='\" + item.value + \"' data-hint='\" + item.hint + \"' data-name='\" + item.name + \"' \" + required + \" />\";\n        }\n\n        return self.renderInputs(required, $input, item.value, item.type, item.name, item.hint, className);\n      }\n    });\n\n    if (this.option.$container.hasClass('has-fields')) {\n      fields = new Fields(this.option, this.$form);\n    }\n\n    this.$modalInputs = this.$form.find('.body').find('input, textarea, select');\n\n    if (this.$togglerInput) {\n      this.activateFieldToggle();\n    }\n\n    this.show();\n    this.$saveBtn = body.find('.submit');\n    this.$cancelBtn = body.find('.cancel');\n    this.addListener(this.$cancelBtn, 'click', 'cancel');\n    return this.addListener(this.$form, 'submit', 'save');\n  },\n  activateFieldToggle: function activateFieldToggle() {\n    var $toggler;\n    var item;\n    $toggler = this.$form.find('.toggle-btn');\n\n    if (this.$togglerInput.value) {\n      item = this.$form.find('[data-selection-target=\"' + this.$togglerInput.value + '\"]');\n      item.parent().addClass('active-field');\n    } else {\n      $($toggler[0]).parent().addClass('active-field');\n      target = $($toggler[0]).data('selection-target');\n      input = $('input[name=\"' + this.$togglerInput.name + '\"]');\n      input.val(target);\n    }\n\n    $toggler.on('click', $.proxy(function (e) {\n      var input;\n      var target;\n      $toggler.parent().removeClass('active-field');\n      this.disableField($(e.target).parent().parent().find('input'));\n      this.disableField($(e.target).parent().parent().find('select'));\n      $(e.target).parent().addClass('active-field');\n      this.enableField($(e.target).parent().find('input'));\n      this.enableField($(e.target).parent().find('select'));\n      target = $(e.target).data('selection-target');\n      input = $('input[name=\"' + this.$togglerInput.name + '\"]');\n      input.val(target);\n    }, this));\n  },\n  disableField: function disableField(target) {\n    target.prop('disabled', true);\n    target.val('');\n  },\n  enableField: function enableField(target) {\n    target.prop('disabled', false);\n  },\n  renderInputs: function renderInputs(required, el, value, type, name, hint, className) {\n    var $input, togglerClass;\n    togglerClass = this.hasTogglers ? 'toggle-field' : '';\n\n    if (type === 'select') {\n      $input = $('<div class=\"fb-field ' + togglerClass + '\">' + '<div class=\"input-hint\">' + hint + '</div>' + '<div class=\"select input\"><select class=\"' + className + ' ' + required + '\" data-hint=\"' + hint + '\" data-name=\"' + name + '\" /></div>' + '</div>');\n      $.each(el, function (i, item) {\n        $input.find('select').append($('<option>', {\n          value: item.value,\n          text: item.label\n        }));\n      });\n      $input.find('select').val(value);\n    } else {\n      $input = $('<div class=\"fb-field ' + togglerClass + '\">' + '<div class=\"input-hint\">' + hint + '</div>' + '<div class=\"input\">' + el + '</div>' + '</div>');\n    }\n\n    if (this.hasTogglers) {\n      $input.append($('<div class=\"toggle-btn\" data-selection-target=\"' + hint.toLowerCase() + '\"></div>'));\n    }\n\n    this.$form.find('.body').append($input); // if (type === 'textarea') {\n    //     return this.initRedactor(el);\n    // }\n  },\n  initRedactor: function initRedactor(item) {\n    var className, el;\n    className = $(item)[0].className;\n    el = this.$form.find(\".\" + className);\n    el.redactor({\n      maxHeight: 160,\n      minHeight: 150,\n      maxWidth: '400px',\n      buttons: ['bold', 'italic', 'link', 'horizontalrule'],\n      plugins: ['fontfamily', 'fontsize', 'alignment', 'fontcolor']\n    });\n    return this.$redactor = el.redactor('core.object');\n  },\n  cancel: function cancel() {\n    if (!this.option.editing) {\n      this.option.$edit.addClass('hidden');\n      this.option.$container.removeClass('option-enabled');\n      this.option.$resultContainer.html('');\n      this.option.$toggle.html('ENABLE');\n      this.disableOption();\n      return this.closeModal();\n    } else {\n      return this.closeModal();\n    }\n  },\n  disableOption: function disableOption() {\n    if (this.option.$enableCheckbox) {\n      return this.option.$enableCheckbox.prop('checked', false);\n    }\n  },\n  hide: function hide() {\n    return this.cancel();\n  },\n  closeModal: function closeModal(ev) {\n    this.disable();\n\n    if (ev) {\n      ev.stopPropagation();\n    }\n\n    if (this.$container) {\n      this.$container.velocity('fadeOut', {\n        duration: Garnish.FX_DURATION\n      });\n      this.$shade.velocity('fadeOut', {\n        duration: Garnish.FX_DURATION,\n        complete: $.proxy(this, 'onFadeOut')\n      });\n\n      if (this.settings.hideOnShadeClick) {\n        this.removeListener(this.$shade, 'click');\n      }\n\n      this.removeListener(Garnish.$win, 'resize');\n    }\n\n    this.visible = false;\n    Garnish.Modal.visibleModal = null;\n\n    if (this.settings.hideOnEsc) {\n      Garnish.escManager.unregister(this);\n    }\n\n    this.trigger('hide');\n    return this.settings.onHide();\n  },\n  runValidation: function runValidation(e) {\n    var self;\n    e.preventDefault();\n    self = this;\n\n    if (this.$validationItems) {\n      return $.each(this.$validationItems, function (i, item) {\n        var input;\n        input = self.$form.find(\".\" + item.validation.inputClass);\n\n        if (input.val().match(/^\\d+$/)) {\n          return item.validation.passed = true;\n        } else {\n          item.validation.passed = false;\n          return Craft.cp.displayNotice(item.validation.errorMessage);\n        }\n      });\n    } else {\n      return this.save();\n    }\n  },\n  save: function save(e) {\n    var self;\n    e.preventDefault();\n    self = this;\n\n    if (this.option.$container.hasClass('tags')) {\n      this.checkErrors();\n\n      if (this.errors.length > 0) {\n        $.each(self.errors, function (i, item) {\n          $(item).parent().parent().addClass('error');\n        });\n        Garnish.shake(this.$container);\n      } else {\n        this.updateOption();\n      }\n    } else {\n      this.checkErrors();\n\n      if (this.errorLength === this.$modalInputs.length) {\n        $.each(self.errors, function (i, item) {\n          if ($(item).is('select')) {\n            $(item).parent().parent().addClass('error');\n          } else {\n            $(item).parent().parent().addClass('error');\n          }\n        });\n        Garnish.shake(this.$container);\n      } else {\n        this.updateOption();\n      }\n    }\n  },\n  checkErrors: function checkErrors() {\n    var self;\n    self = this;\n    this.errors = [];\n    this.errorLength = 0;\n    $.each(this.$modalInputs, function (i, item) {\n      if ($(item).hasClass('data-required')) {\n        if ($(item).val() === '') {\n          self.errors[i] = item;\n          self.errorLength += 1;\n        }\n      }\n    });\n  },\n  updateOption: function updateOption() {\n    this.option.updateHtmlFromModal();\n    this.closeModal();\n    this.$form[0].reset();\n    Craft.cp.displayNotice(this.option.$data.successMessage);\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kZXZlbG9wbWVudC9qcy9tb2RhbC5qcz9iMTYyIl0sIm5hbWVzIjpbImlzVG9nZ2xlciIsIml0ZW0iLCJjb25zb2xlIiwibG9nIiwiT3B0aW9uTW9kYWwiLCJ3aW5kb3ciLCJHYXJuaXNoIiwiTW9kYWwiLCJleHRlbmQiLCJvcHRpb24iLCIkZm9ybSIsIiRtb2RhbElucHV0cyIsIiRyZWRhY3RvciIsIiR2YWxpZGF0aW9uSXRlbXMiLCIkdG9nZ2xlcklucHV0IiwiaGFzVG9nZ2xlcnMiLCJlcnJvcnMiLCJlcnJvckxlbmd0aCIsImluaXQiLCJib2R5IiwiZmllbGRzIiwic2VsZiIsImJhc2UiLCIkIiwiYXBwZW5kVG8iLCIkYm9kIiwic2V0Q29udGFpbmVyIiwiJGRhdGEiLCJ0aXRsZSIsImluc3RydWN0aW9ucyIsIkNyYWZ0IiwidCIsImpvaW4iLCJ0b2dnbGVyIiwiJGlucHV0cyIsInNvbWUiLCJlbGVtIiwiZWFjaCIsImkiLCIkaW5wdXQiLCJjYW1lbENsYXNzTmFtZSIsImNsYXNzTmFtZSIsInJlcXVpcmVkIiwidmFsaWRhdGlvbiIsInR5cGUiLCJuYW1lIiwicmVwbGFjZSIsInNsaWNlIiwiZyIsInRvVXBwZXJDYXNlIiwidmFsdWUiLCJoaW50IiwicGFyc2VKU09OIiwib3B0aW9ucyIsInJlbmRlcklucHV0cyIsIiRjb250YWluZXIiLCJoYXNDbGFzcyIsIkZpZWxkcyIsImZpbmQiLCJhY3RpdmF0ZUZpZWxkVG9nZ2xlIiwic2hvdyIsIiRzYXZlQnRuIiwiJGNhbmNlbEJ0biIsImFkZExpc3RlbmVyIiwiJHRvZ2dsZXIiLCJwYXJlbnQiLCJhZGRDbGFzcyIsInRhcmdldCIsImRhdGEiLCJpbnB1dCIsInZhbCIsIm9uIiwicHJveHkiLCJlIiwicmVtb3ZlQ2xhc3MiLCJkaXNhYmxlRmllbGQiLCJlbmFibGVGaWVsZCIsInByb3AiLCJlbCIsInRvZ2dsZXJDbGFzcyIsImFwcGVuZCIsInRleHQiLCJsYWJlbCIsInRvTG93ZXJDYXNlIiwiaW5pdFJlZGFjdG9yIiwicmVkYWN0b3IiLCJtYXhIZWlnaHQiLCJtaW5IZWlnaHQiLCJtYXhXaWR0aCIsImJ1dHRvbnMiLCJwbHVnaW5zIiwiY2FuY2VsIiwiZWRpdGluZyIsIiRlZGl0IiwiJHJlc3VsdENvbnRhaW5lciIsImh0bWwiLCIkdG9nZ2xlIiwiZGlzYWJsZU9wdGlvbiIsImNsb3NlTW9kYWwiLCIkZW5hYmxlQ2hlY2tib3giLCJoaWRlIiwiZXYiLCJkaXNhYmxlIiwic3RvcFByb3BhZ2F0aW9uIiwidmVsb2NpdHkiLCJkdXJhdGlvbiIsIkZYX0RVUkFUSU9OIiwiJHNoYWRlIiwiY29tcGxldGUiLCJzZXR0aW5ncyIsImhpZGVPblNoYWRlQ2xpY2siLCJyZW1vdmVMaXN0ZW5lciIsIiR3aW4iLCJ2aXNpYmxlIiwidmlzaWJsZU1vZGFsIiwiaGlkZU9uRXNjIiwiZXNjTWFuYWdlciIsInVucmVnaXN0ZXIiLCJ0cmlnZ2VyIiwib25IaWRlIiwicnVuVmFsaWRhdGlvbiIsInByZXZlbnREZWZhdWx0IiwiaW5wdXRDbGFzcyIsIm1hdGNoIiwicGFzc2VkIiwiY3AiLCJkaXNwbGF5Tm90aWNlIiwiZXJyb3JNZXNzYWdlIiwic2F2ZSIsImNoZWNrRXJyb3JzIiwibGVuZ3RoIiwic2hha2UiLCJ1cGRhdGVPcHRpb24iLCJpcyIsInVwZGF0ZUh0bWxGcm9tTW9kYWwiLCJyZXNldCIsInN1Y2Nlc3NNZXNzYWdlIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxTQUFULENBQW1CQyxJQUFuQixFQUF5QjtBQUNyQkMsU0FBTyxDQUFDQyxHQUFSLENBQVlGLElBQVo7QUFDSDs7QUFFRCxJQUFJRyxXQUFKO0FBRUFDLE1BQU0sQ0FBQ0QsV0FBUCxHQUFxQkUsT0FBTyxDQUFDQyxLQUFSLENBQWNDLE1BQWQsQ0FBcUI7QUFDdENDLFFBQU0sRUFBRSxJQUQ4QjtBQUV0Q0MsT0FBSyxFQUFFLElBRitCO0FBR3RDQyxjQUFZLEVBQUUsSUFId0I7QUFJdENDLFdBQVMsRUFBRSxJQUoyQjtBQUt0Q0Msa0JB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QUNuQyxZQUFJakMsQ0FBQyxDQUFDdEIsSUFBRCxDQUFELENBQVFxRSxHQUFSLE9BQWtCLEVBQXRCLEVBQTBCO0FBQ3RCakQsY0FBSSxDQUFDTCxNQUFMLENBQVlzQixDQUFaLElBQWlCckMsSUFBakI7QUFDQW9CLGNBQUksQ0FBQ0osV0FBTCxJQUFvQixDQUFwQjtBQUNIO0FBQ0o7QUFDSixLQVBEO0FBUUgsR0ExVHFDO0FBNFR0Q21ILGNBQVksRUFBRSx3QkFBVztBQUNyQixTQUFLM0gsTUFBTCxDQUFZNkgsbUJBQVo7QUFDQSxTQUFLcEMsVUFBTDtBQUNBLFNBQUt4RixLQUFMLENBQVcsQ0FBWCxFQUFjNkgsS0FBZDtBQUVBekcsU0FBSyxDQUFDK0YsRUFBTixDQUFTQyxhQUFULENBQXVCLEtBQUtySCxNQUFMLENBQVlrQixLQUFaLENBQWtCNkcsY0FBekM7QUFDSDtBQWxVcUMsQ0FBckIsQ0FBckIiLCJmaWxlIjoiLi9kZXZlbG9wbWVudC9qcy9tb2RhbC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGlzVG9nZ2xlcihpdGVtKSB7XG4gICAgY29uc29sZS5sb2coaXRlbSlcbn1cblxubGV0IE9wdGlvbk1vZGFsO1xuXG53aW5kb3cuT3B0aW9uTW9kYWwgPSBHYXJuaXNoLk1vZGFsLmV4dGVuZCh7XG4gICAgb3B0aW9uOiBudWxsLFxuICAgICRmb3JtOiBudWxsLFxuICAgICRtb2RhbElucHV0czogbnVsbCxcbiAgICAkcmVkYWN0b3I6IG51bGwsXG4gICAgJHZhbGlkYXRpb25JdGVtczogW10sXG4gICAgXG4gICAgJHRvZ2dsZXJJbnB1dDogbnVsbCxcbiAgICBoYXNUb2dnbGVyczogZmFsc2UsXG5cbiAgICBlcnJvcnM6IFtdLFxuICAgIGVycm9yTGVuZ3RoOiAwLFxuXG4gICAgaW5pdDogZnVuY3Rpb24ob3B0aW9uKSB7XG4gICAgICAgIHZhciBib2R5LCBmaWVsZHMsIHNlbGY7XG4gICAgICAgIHNlbGYgPSB0aGlzO1xuICAgICAgICB0aGlzLm9wdGlvbiA9IG9wdGlvbjtcbiAgICAgICAgdGhpcy5iYXNlKCk7XG4gICAgICAgIHRoaXMuJGZvcm0gPSAkKCc8Zm9ybSBjbGFzcz1cIm1vZGFsIGZpdHRlZCBmb3JtYnVpbGRlci1tb2RhbFwiPicpLmFwcGVuZFRvKEdhcm5pc2guJGJvZCk7XG4gICAgICAgIHRoaXMuc2V0Q29udGFpbmVyKHRoaXMuJGZvcm0pO1xuICAgICAgICBcbiAgICAgICAgYm9keSA9ICQoW1xuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJoZWFkZXJcIj4nLFxuICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+Jywgb3B0aW9uLiRkYXRhLnRpdGxlLCAnPC9zcGFuPicsIFxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiaW5zdHJ1Y3Rpb25zXCI+Jywgb3B0aW9uLiRkYXRhLmluc3RydWN0aW9ucywgJzwvZGl2PicsIFxuICAgICAgICAgICAgJzwvZGl2PicsXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cImJvZHlcIj48L2Rpdj4nLCBcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZm9vdGVyXCI+JyxcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImJ1dHRvbnNcIj4nLCBcbiAgICAgICAgICAgICAgICAgICAgJzxpbnB1dCB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gY2FuY2VsXCIgdmFsdWU9XCInICsgQ3JhZnQudCgnZm9ybS1idWlsZGVyJywgJ0NhbmNlbCcpICsgJ1wiPicsXG4gICAgICAgICAgICAgICAgICAgICc8aW5wdXQgdHlwZT1cInN1Ym1pdFwiIGNsYXNzPVwiYnRuIHN1Ym1pdFwiIHZhbHVlPVwiJyArIENyYWZ0LnQoJ2Zvcm0tYnVpbGRlcicsICdTYXZlJykgKyAnXCI+JyxcbiAgICAgICAgICAgICAgICAnPC9kaXY+JywgXG4gICAgICAgICAgICAnPC9kaXY+J10uam9pbignJykpLmFwcGVuZFRvKHRoaXMuJGZvcm0pO1xuICAgICAgICBcbiAgICAgICAgdG9nZ2xlciA9IG9wdGlvbi4kaW5wdXRzLnNvbWUoZnVuY3Rpb24oZWxlbSkgeyByZXR1cm4gZWxlbS50b2dnbGVyIH0gKVxuICAgICAgICB0aGlzLmhhc1RvZ2dsZXJzID0gdG9nZ2xlclxuXG4gICAgICAgICQuZWFjaChvcHRpb24uJGlucHV0cywgZnVuY3Rpb24oaSwgaXRlbSkge1xuICAgICAgICAgICAgdmFyICRpbnB1dCwgY2FtZWxDbGFzc05hbWUsIGNsYXNzTmFtZSwgcmVxdWlyZWQsIHZhbGlkYXRpb247XG4gICAgICAgICAgICByZXF1aXJlZCA9IGl0ZW0ucmVxdWlyZWQgPyAnZGF0YS1yZXF1aXJlZCcgOiAnZGF0YS1ub3QtcmVxdWlyZWQnO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoaXRlbS50b2dnbGVyKSB7XG4gICAgICAgICAgICAgICAgc2VsZi4kdG9nZ2xlcklucHV0ID0gaXRlbTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGl0ZW0udHlwZSAhPT0gJ2NoZWNrYm94JyAmJiAhaXRlbS50b2dnbGVyKSB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lID0gaXRlbS5uYW1lLnJlcGxhY2UoL1tfXFxXXSsvZywgXCItXCIpLnNsaWNlKDAsIC0xKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjYW1lbENsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKC8tKFthLXpdKS9nLCBmdW5jdGlvbihnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnWzFdLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoaXRlbS52YWxpZGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb24gPSBpdGVtLnZhbGlkYXRpb247XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb25bJ3Bhc3NlZCddID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb25bJ2lucHV0Q2xhc3MnXSA9IGNsYXNzTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi4kdmFsaWRhdGlvbkl0ZW1zW2ldID0gaXRlbTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSAndGV4dGFyZWEnKSB7XG4gICAgICAgICAgICAgICAgICAgICRpbnB1dCA9IFwiPHRleHRhcmVhIGNsYXNzPSdcIiArIGNsYXNzTmFtZSArIFwiIFwiICsgcmVxdWlyZWQgKyBcIicgdmFsdWU9J1wiICsgaXRlbS52YWx1ZSArIFwiJyBkYXRhLWhpbnQ9J1wiICsgaXRlbS5oaW50ICsgXCInIGRhdGEtbmFtZT0nXCIgKyBpdGVtLm5hbWUgKyBcIicgXCIgKyByZXF1aXJlZCArIFwiIC8+XCIgKyBpdGVtLnZhbHVlICsgXCI8L3RleHRhcmVhPlwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSAnc2VsZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAkaW5wdXQgPSAkLnBhcnNlSlNPTihpdGVtLm9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICRpbnB1dCA9IFwiPGlucHV0IHR5cGU9J1wiICsgaXRlbS50eXBlICsgXCInIGNsYXNzPSdcIiArIGNsYXNzTmFtZSArIFwiIFwiICsgcmVxdWlyZWQgKyBcIicgdmFsdWU9J1wiICsgaXRlbS52YWx1ZSArIFwiJyBkYXRhLWhpbnQ9J1wiICsgaXRlbS5oaW50ICsgXCInIGRhdGEtbmFtZT0nXCIgKyBpdGVtLm5hbWUgKyBcIicgXCIgKyByZXF1aXJlZCArIFwiIC8+XCI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYucmVuZGVySW5wdXRzKHJlcXVpcmVkLCAkaW5wdXQsIGl0ZW0udmFsdWUsIGl0ZW0udHlwZSwgaXRlbS5uYW1lLCBpdGVtLmhpbnQsIGNsYXNzTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbi4kY29udGFpbmVyLmhhc0NsYXNzKCdoYXMtZmllbGRzJykpIHtcbiAgICAgICAgICAgIGZpZWxkcyA9IG5ldyBGaWVsZHModGhpcy5vcHRpb24sIHRoaXMuJGZvcm0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy4kbW9kYWxJbnB1dHMgPSB0aGlzLiRmb3JtLmZpbmQoJy5ib2R5JykuZmluZCgnaW5wdXQsIHRleHRhcmVhLCBzZWxlY3QnKTtcblxuICAgICAgICBpZiAodGhpcy4kdG9nZ2xlcklucHV0KSB7XG4gICAgICAgICAgICB0aGlzLmFjdGl2YXRlRmllbGRUb2dnbGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgICB0aGlzLiRzYXZlQnRuID0gYm9keS5maW5kKCcuc3VibWl0Jyk7XG4gICAgICAgIHRoaXMuJGNhbmNlbEJ0biA9IGJvZHkuZmluZCgnLmNhbmNlbCcpO1xuICAgICAgICB0aGlzLmFkZExpc3RlbmVyKHRoaXMuJGNhbmNlbEJ0biwgJ2NsaWNrJywgJ2NhbmNlbCcpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmFkZExpc3RlbmVyKHRoaXMuJGZvcm0sICdzdWJtaXQnLCAnc2F2ZScpO1xuICAgIH0sXG5cbiAgICBhY3RpdmF0ZUZpZWxkVG9nZ2xlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgbGV0ICR0b2dnbGVyXG4gICAgICAgIGxldCBpdGVtXG5cbiAgICAgICAgJHRvZ2dsZXIgPSB0aGlzLiRmb3JtLmZpbmQoJy50b2dnbGUtYnRuJylcblxuICAgICAgICBpZiAodGhpcy4kdG9nZ2xlcklucHV0LnZhbHVlKSB7XG4gICAgICAgICAgICBpdGVtID0gdGhpcy4kZm9ybS5maW5kKCdbZGF0YS1zZWxlY3Rpb24tdGFyZ2V0PVwiJyArIHRoaXMuJHRvZ2dsZXJJbnB1dC52YWx1ZSArICdcIl0nKVxuICAgICAgICAgICAgaXRlbS5wYXJlbnQoKS5hZGRDbGFzcygnYWN0aXZlLWZpZWxkJylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICQoJHRvZ2dsZXJbMF0pLnBhcmVudCgpLmFkZENsYXNzKCdhY3RpdmUtZmllbGQnKVxuICAgICAgICAgICAgdGFyZ2V0ID0gJCgkdG9nZ2xlclswXSkuZGF0YSgnc2VsZWN0aW9uLXRhcmdldCcpXG4gICAgICAgICAgICBpbnB1dCA9ICQoJ2lucHV0W25hbWU9XCInICsgdGhpcy4kdG9nZ2xlcklucHV0Lm5hbWUgKyAnXCJdJylcbiAgICAgICAgICAgIGlucHV0LnZhbCh0YXJnZXQpXG4gICAgICAgIH1cblxuICAgICAgICAkdG9nZ2xlci5vbignY2xpY2snLCAkLnByb3h5KChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBsZXQgaW5wdXRcbiAgICAgICAgICAgIGxldCB0YXJnZXRcblxuICAgICAgICAgICAgJHRvZ2dsZXIucGFyZW50KCkucmVtb3ZlQ2xhc3MoJ2FjdGl2ZS1maWVsZCcpXG5cbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZUZpZWxkKCQoZS50YXJnZXQpLnBhcmVudCgpLnBhcmVudCgpLmZpbmQoJ2lucHV0JykpXG4gICAgICAgICAgICB0aGlzLmRpc2FibGVGaWVsZCgkKGUudGFyZ2V0KS5wYXJlbnQoKS5wYXJlbnQoKS5maW5kKCdzZWxlY3QnKSlcblxuICAgICAgICAgICAgJChlLnRhcmdldCkucGFyZW50KCkuYWRkQ2xhc3MoJ2FjdGl2ZS1maWVsZCcpXG5cbiAgICAgICAgICAgIHRoaXMuZW5hYmxlRmllbGQoJChlLnRhcmdldCkucGFyZW50KCkuZmluZCgnaW5wdXQnKSlcbiAgICAgICAgICAgIHRoaXMuZW5hYmxlRmllbGQoJChlLnRhcmdldCkucGFyZW50KCkuZmluZCgnc2VsZWN0JykpXG5cbiAgICAgICAgICAgIHRhcmdldCA9ICQoZS50YXJnZXQpLmRhdGEoJ3NlbGVjdGlvbi10YXJnZXQnKVxuICAgICAgICAgICAgaW5wdXQgPSAkKCdpbnB1dFtuYW1lPVwiJyArIHRoaXMuJHRvZ2dsZXJJbnB1dC5uYW1lICsgJ1wiXScpXG4gICAgICAgICAgICBpbnB1dC52YWwodGFyZ2V0KVxuICAgICAgICB9KSwgdGhpcykpXG5cbiAgICB9LFxuXG4gICAgZGlzYWJsZUZpZWxkOiBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICAgICAgdGFyZ2V0LnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSlcbiAgICAgICAgdGFyZ2V0LnZhbCgnJylcbiAgICB9LFxuXG4gICAgZW5hYmxlRmllbGQ6IGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgICB0YXJnZXQucHJvcCgnZGlzYWJsZWQnLCBmYWxzZSlcbiAgICB9LFxuXG4gICAgcmVuZGVySW5wdXRzOiBmdW5jdGlvbihyZXF1aXJlZCwgZWwsIHZhbHVlLCB0eXBlLCBuYW1lLCBoaW50LCBjbGFzc05hbWUpIHtcbiAgICAgICAgdmFyICRpbnB1dCwgdG9nZ2xlckNsYXNzXG5cbiAgICAgICAgdG9nZ2xlckNsYXNzID0gdGhpcy5oYXNUb2dnbGVycyA/ICd0b2dnbGUtZmllbGQnIDogJydcbiAgICAgICAgaWYgKHR5cGUgPT09ICdzZWxlY3QnKSB7XG4gICAgICAgICAgICAkaW5wdXQgPSAkKFxuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZmItZmllbGQgJyt0b2dnbGVyQ2xhc3MrJ1wiPicgKyBcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJpbnB1dC1oaW50XCI+JyArIGhpbnQgKyAnPC9kaXY+JyArIFxuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlbGVjdCBpbnB1dFwiPjxzZWxlY3QgY2xhc3M9XCInICsgY2xhc3NOYW1lICsgJyAnICsgcmVxdWlyZWQgKyAnXCIgZGF0YS1oaW50PVwiJyArIGhpbnQgKyAnXCIgZGF0YS1uYW1lPVwiJyArIG5hbWUgKyAnXCIgLz48L2Rpdj4nICsgXG4gICAgICAgICAgICAgICAgJzwvZGl2PicpO1xuICAgICAgICAgICAgJC5lYWNoKGVsLCBmdW5jdGlvbihpLCBpdGVtKSB7XG4gICAgICAgICAgICAgICAgJGlucHV0LmZpbmQoJ3NlbGVjdCcpLmFwcGVuZCgkKCc8b3B0aW9uPicsIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGl0ZW0udmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IGl0ZW0ubGFiZWxcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICRpbnB1dC5maW5kKCdzZWxlY3QnKS52YWwodmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJGlucHV0ID0gJChcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImZiLWZpZWxkICcrdG9nZ2xlckNsYXNzKydcIj4nICsgXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiaW5wdXQtaGludFwiPicgKyBoaW50ICsgJzwvZGl2PicgKyBcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJpbnB1dFwiPicgKyBlbCArICc8L2Rpdj4nICsgXG4gICAgICAgICAgICAgICAgJzwvZGl2PicpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaGFzVG9nZ2xlcnMpIHtcbiAgICAgICAgICAgICRpbnB1dC5hcHBlbmQoJCgnPGRpdiBjbGFzcz1cInRvZ2dsZS1idG5cIiBkYXRhLXNlbGVjdGlvbi10YXJnZXQ9XCInICsgaGludC50b0xvd2VyQ2FzZSgpICsgJ1wiPjwvZGl2PicpKVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy4kZm9ybS5maW5kKCcuYm9keScpLmFwcGVuZCgkaW5wdXQpO1xuXG4gICAgICAgIC8vIGlmICh0eXBlID09PSAndGV4dGFyZWEnKSB7XG4gICAgICAgIC8vICAgICByZXR1cm4gdGhpcy5pbml0UmVkYWN0b3IoZWwpO1xuICAgICAgICAvLyB9XG4gICAgfSxcblxuICAgIGluaXRSZWRhY3RvcjogZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICB2YXIgY2xhc3NOYW1lLCBlbDtcbiAgICAgICAgY2xhc3NOYW1lID0gJChpdGVtKVswXS5jbGFzc05hbWU7XG4gICAgICAgIGVsID0gdGhpcy4kZm9ybS5maW5kKFwiLlwiICsgY2xhc3NOYW1lKTtcbiAgICAgICAgZWwucmVkYWN0b3Ioe1xuICAgICAgICAgICAgbWF4SGVpZ2h0OiAxNjAsXG4gICAgICAgICAgICBtaW5IZWlnaHQ6IDE1MCxcbiAgICAgICAgICAgIG1heFdpZHRoOiAnNDAwcHgnLFxuICAgICAgICAgICAgYnV0dG9uczogWydib2xkJywgJ2l0YWxpYycsICdsaW5rJywgJ2hvcml6b250YWxydWxlJ10sXG4gICAgICAgICAgICBwbHVnaW5zOiBbJ2ZvbnRmYW1pbHknLCAnZm9udHNpemUnLCAnYWxpZ25tZW50JywgJ2ZvbnRjb2xvciddXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLiRyZWRhY3RvciA9IGVsLnJlZGFjdG9yKCdjb3JlLm9iamVjdCcpO1xuICAgIH0sXG5cbiAgICBjYW5jZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9uLmVkaXRpbmcpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9uLiRlZGl0LmFkZENsYXNzKCdoaWRkZW4nKTtcbiAgICAgICAgICAgIHRoaXMub3B0aW9uLiRjb250YWluZXIucmVtb3ZlQ2xhc3MoJ29wdGlvbi1lbmFibGVkJyk7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbi4kcmVzdWx0Q29udGFpbmVyLmh0bWwoJycpO1xuICAgICAgICAgICAgdGhpcy5vcHRpb24uJHRvZ2dsZS5odG1sKCdFTkFCTEUnKTtcbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZU9wdGlvbigpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xvc2VNb2RhbCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xvc2VNb2RhbCgpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGRpc2FibGVPcHRpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb24uJGVuYWJsZUNoZWNrYm94KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb24uJGVuYWJsZUNoZWNrYm94LnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgaGlkZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbmNlbCgpO1xuICAgIH0sXG5cbiAgICBjbG9zZU1vZGFsOiBmdW5jdGlvbihldikge1xuICAgICAgICB0aGlzLmRpc2FibGUoKTtcblxuICAgICAgICBpZiAoZXYpIHtcbiAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuJGNvbnRhaW5lcikge1xuICAgICAgICAgICAgdGhpcy4kY29udGFpbmVyLnZlbG9jaXR5KCdmYWRlT3V0Jywge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBHYXJuaXNoLkZYX0RVUkFUSU9OXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy4kc2hhZGUudmVsb2NpdHkoJ2ZhZGVPdXQnLCB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb246IEdhcm5pc2guRlhfRFVSQVRJT04sXG4gICAgICAgICAgICAgICAgY29tcGxldGU6ICQucHJveHkodGhpcywgJ29uRmFkZU91dCcpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuaGlkZU9uU2hhZGVDbGljaykge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodGhpcy4kc2hhZGUsICdjbGljaycpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKEdhcm5pc2guJHdpbiwgJ3Jlc2l6ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgIEdhcm5pc2guTW9kYWwudmlzaWJsZU1vZGFsID0gbnVsbDtcbiAgICAgICAgXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmhpZGVPbkVzYykge1xuICAgICAgICAgICAgR2FybmlzaC5lc2NNYW5hZ2VyLnVucmVnaXN0ZXIodGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRyaWdnZXIoJ2hpZGUnKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy5vbkhpZGUoKTtcbiAgICB9LFxuXG4gICAgcnVuVmFsaWRhdGlvbjogZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgc2VsZjtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBzZWxmID0gdGhpcztcblxuICAgICAgICBpZiAodGhpcy4kdmFsaWRhdGlvbkl0ZW1zKSB7XG4gICAgICAgICAgICByZXR1cm4gJC5lYWNoKHRoaXMuJHZhbGlkYXRpb25JdGVtcywgZnVuY3Rpb24oaSwgaXRlbSkge1xuICAgICAgICAgICAgICAgIHZhciBpbnB1dDtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IHNlbGYuJGZvcm0uZmluZChcIi5cIiArIGl0ZW0udmFsaWRhdGlvbi5pbnB1dENsYXNzKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQudmFsKCkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLnZhbGlkYXRpb24ucGFzc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpdGVtLnZhbGlkYXRpb24ucGFzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBDcmFmdC5jcC5kaXNwbGF5Tm90aWNlKGl0ZW0udmFsaWRhdGlvbi5lcnJvck1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2F2ZSgpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHNhdmU6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIHNlbGY7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9uLiRjb250YWluZXIuaGFzQ2xhc3MoJ3RhZ3MnKSkge1xuICAgICAgICAgICAgdGhpcy5jaGVja0Vycm9ycygpO1xuICAgICAgICAgICAgaWYgKHRoaXMuZXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAkLmVhY2goc2VsZi5lcnJvcnMsIGZ1bmN0aW9uKGksIGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgJChpdGVtKS5wYXJlbnQoKS5wYXJlbnQoKS5hZGRDbGFzcygnZXJyb3InKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIEdhcm5pc2guc2hha2UodGhpcy4kY29udGFpbmVyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMudXBkYXRlT3B0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrRXJyb3JzKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5lcnJvckxlbmd0aCA9PT0gdGhpcy4kbW9kYWxJbnB1dHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgJC5lYWNoKHNlbGYuZXJyb3JzLCBmdW5jdGlvbihpLCBpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkKGl0ZW0pLmlzKCdzZWxlY3QnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJChpdGVtKS5wYXJlbnQoKS5wYXJlbnQoKS5hZGRDbGFzcygnZXJyb3InKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoaXRlbSkucGFyZW50KCkucGFyZW50KCkuYWRkQ2xhc3MoJ2Vycm9yJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIEdhcm5pc2guc2hha2UodGhpcy4kY29udGFpbmVyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVPcHRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjaGVja0Vycm9yczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzZWxmO1xuICAgICAgICBzZWxmID0gdGhpcztcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBbXTtcbiAgICAgICAgdGhpcy5lcnJvckxlbmd0aCA9IDA7XG5cbiAgICAgICAgJC5lYWNoKHRoaXMuJG1vZGFsSW5wdXRzLCBmdW5jdGlvbihpLCBpdGVtKSB7XG4gICAgICAgICAgICBpZiAoJChpdGVtKS5oYXNDbGFzcygnZGF0YS1yZXF1aXJlZCcpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCQoaXRlbSkudmFsKCkgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZXJyb3JzW2ldID0gaXRlbTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5lcnJvckxlbmd0aCArPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIHVwZGF0ZU9wdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMub3B0aW9uLnVwZGF0ZUh0bWxGcm9tTW9kYWwoKTtcbiAgICAgICAgdGhpcy5jbG9zZU1vZGFsKCk7XG4gICAgICAgIHRoaXMuJGZvcm1bMF0ucmVzZXQoKTtcblxuICAgICAgICBDcmFmdC5jcC5kaXNwbGF5Tm90aWNlKHRoaXMub3B0aW9uLiRkYXRhLnN1Y2Nlc3NNZXNzYWdlKTtcbiAgICB9XG59KTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./development/js/modal.js\n");

/***/ }),

/***/ 10:
/*!***************************************!*\
  !*** multi ./development/js/modal.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Users/owldesign/Formbuilder/plugins/formbuilder/development/js/modal.js */"./development/js/modal.js");


/***/ })

/******/ });