/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 13);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./development/js/integrations.js":
/*!****************************************!*\
  !*** ./development/js/integrations.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var IntegrationsHud = Garnish.Base.extend({\n  $listContainer: null,\n  $container: null,\n  type: null,\n  hud: null,\n  init: function init(payload) {\n    this.$listContainer = $('#current-integrations-list');\n    this.$container = $(payload.target);\n    this.type = payload.type;\n    this.getHud();\n  },\n  handleSubmitted: function handleSubmitted(data) {\n    if ($(this.$listContainer[0].children[0]).hasClass('empty')) {\n      $('#current-integrations-list').html(data.template);\n    } else {\n      $('#current-integrations-list').append(data.template);\n    } // TODO: make sure you can delete items after they have been inserted\n\n\n    this.hud.hide();\n  },\n  getHud: function getHud() {\n    var data = {\n      type: this.type\n    };\n    Craft.postActionRequest('form-builder/integrations/get-hud-modal', data, $.proxy(function (response, textStatus) {\n      if (response.success) {\n        this.createHud(response.template);\n      }\n    }, this));\n  },\n  createHud: function createHud(template) {\n    var that = this;\n    this.hud = new Garnish.HUD(this.$container, template, {\n      hudClass: 'hud formbuilder-hud',\n      bodyClass: 'body',\n      closeOtherHUDs: false\n    });\n    this.hud.on('onSubmitted', $.proxy(this, 'handleSubmitted'));\n    this.hud.on('hide', $.proxy(function () {\n      delete this.hud;\n      $('.hud-shade').remove();\n      $('.formbuilder-hud').remove();\n    }, this));\n    this.hud.$body.find('input:first').trigger('focus'); // Init handle generator\n\n    new Craft.HandleGenerator('#integration-name', '#integration-handle');\n    var $cancelBtn = this.hud.$body.find('.cancel:first');\n    this.addListener($cancelBtn, 'click', function () {\n      this.hud.hide();\n    });\n    this.hud.on('submit', function (e) {\n      var formData = that.hud.$body.serialize();\n      Craft.postActionRequest('form-builder/integrations/save', formData, $.proxy(function (response, textStatus) {\n        if (response.success) {\n          that.handleSubmitted(response);\n        } else {\n          $.each(response.errors, function (i, item) {\n            $('#field-' + i).addClass('error');\n          });\n        }\n      }, this));\n    });\n  }\n});\nvar IntegrationSelectionHud = Garnish.Base.extend({\n  $container: null,\n  $spinner: null,\n  hud: null,\n  init: function init(el) {\n    this.$container = $(el);\n    this.createHud();\n  },\n  createHud: function createHud() {\n    var data = {\n      type: this.type\n    };\n    $hud = $('<div class=\"hud-loader-body\"/>');\n    this.$spinner = $('<div class=\"loader\"><svg width=\"25px\" height=\"25px\" viewBox=\"0 0 42 42\" xmlns=\"http://www.w3.org/2000/svg\" stroke=\"#474747\"><g fill=\"none\" fill-rule=\"evenodd\"><g transform=\"translate(4 3)\" stroke-width=\"5\"><circle stroke-opacity=\".5\" cx=\"18\" cy=\"18\" r=\"18\"/><path d=\"M36 18c0-9.94-8.06-18-18-18\"><animateTransform attributeName=\"transform\" type=\"rotate\" from=\"0 18 18\" to=\"360 18 18\" dur=\"1s\" repeatCount=\"indefinite\"/></path></g></g></svg></div>').prependTo($hud);\n    this.hud = new Garnish.HUD(this.$container, $hud, {\n      hudClass: 'hud formbuilder-hud',\n      bodyClass: 'body',\n      closeOtherHUDs: false\n    }); // Get Integrations\n\n    Craft.postActionRequest('form-builder/integrations/get-integrations-hud', data, $.proxy(function (response, textStatus) {\n      if (response.success) {\n        this.updateBody(response.template);\n      }\n    }, this));\n  },\n  updateBody: function updateBody(template) {\n    var that = this;\n    this.hud.updateBody(template);\n    this.hud.on('onSubmitted', $.proxy(this, 'handleSubmitted'));\n    this.hud.on('hide', $.proxy(function () {\n      delete this.hud;\n      $('.hud-shade').remove();\n      $('.formbuilder-hud').remove();\n    }, this));\n    var items = this.hud.$body.find('.integration-add-link');\n    items.on('click', function (e) {\n      e.preventDefault();\n      var target = $(e.currentTarget);\n      var data = target[0].dataset;\n      that.trigger('response', {\n        data: data\n      });\n    });\n  }\n});\nvar IntegrationItem = Garnish.Base.extend({\n  $container: null,\n  formId: null,\n  id: null,\n  name: null,\n  handle: null,\n  type: null,\n  status: null,\n  init: function init(data) {\n    this.$container = $('#formbuilder-integrations-container');\n    var payload = {\n      formId: data.formId,\n      id: data.id,\n      name: data.name,\n      handle: data.handle,\n      type: data.type,\n      status: data.status\n    };\n    this.getIntegrationSection(payload);\n  },\n  getIntegrationSection: function getIntegrationSection(payload) {\n    Craft.postActionRequest('form-builder/integrations/get-integration-section', payload, $.proxy(function (response, textStatus) {\n      if (response.success) {\n        this.appendIntegrationHtml(response);\n      }\n    }, this));\n  },\n  appendIntegrationHtml: function appendIntegrationHtml(response) {\n    this.$container.append($(response.template));\n    var container = $('#integration-' + response.type + '-' + response.index);\n    $('.lightswitch', container).lightswitch(); // container.find('.option-item').each(function (i, el) {\n    //     new window.Option(el);\n    // });\n\n    container.find('.delete-btn').on('click', function (e) {\n      e.preventDefault();\n      container.slideUp(300, function () {\n        container.remove();\n      });\n    });\n  }\n});\nGarnish.$doc.ready(function () {\n  $('.add-integration').on('click', function (e) {\n    e.preventDefault();\n    var payload = {\n      target: $(this),\n      type: $(this).data('type')\n    };\n    new IntegrationsHud(payload);\n  });\n  $('.add-integrations-item').on('click', function (e) {\n    e.preventDefault();\n    var formId = $(this).data('form-id');\n    var integrationSelection = new IntegrationSelectionHud($(this));\n    integrationSelection.on('response', function (e) {\n      var type = e.data.type;\n      var allowMultiple = e.data.allowMultiple;\n      e.data.formId = formId;\n      e.target.hud.hide();\n\n      if (allowMultiple === '1') {\n        new IntegrationItem(e.data);\n      } else {\n        var needle = $('#integration-' + type + '-1');\n\n        if (needle.length > 0) {\n          Craft.cp.displayError(Craft.t('form-builder', 'Only 1 integration is allowed for this type'));\n        } else {\n          new IntegrationItem(e.data);\n        }\n      }\n    });\n  });\n  $('#formbuilder-integrations-container .delete-btn').on('click', function (e) {\n    e.preventDefault();\n    var target = $(this).data('target');\n    $('#' + target).slideUp(300, function () {\n      $('#' + target).remove();\n    });\n  });\n  $('.item-remove').on('click', function (e) {\n    var id = $(this).data('id');\n    var target = $(this).parent();\n    var data = {\n      id: id\n    };\n    Craft.postActionRequest('form-builder/integrations/delete', data, $.proxy(function (response, textStatus) {\n      if (response.success) {\n        target.velocity('slideUp', '300', function () {\n          target.remove();\n          Craft.cp.displayNotice(Craft.t('form-builder', 'Integration deleted'));\n        });\n      } else {\n        Craft.cp.displayNotice(Craft.t('form-builder', 'Cannot delete integration'));\n      }\n    }, this));\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./development/js/integrations.js\n");

/***/ }),

/***/ 13:
/*!**********************************************!*\
  !*** multi ./development/js/integrations.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Users/owldesign/Formbuilder/plugins/formbuilder/development/js/integrations.js */"./development/js/integrations.js");


/***/ })

/******/ });