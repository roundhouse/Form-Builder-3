/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 7);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./development/js/tab-designer.js":
/*!****************************************!*\
  !*** ./development/js/tab-designer.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var LD_Tabs;\nLD_Tabs = {\n  setup: function setup() {}\n};\nLD_Tabs = new (Garnish.Base.extend({\n  tabs: null,\n  options: null,\n  init: function init() {\n    this.tabs = {};\n    this.options = {};\n  },\n  setup: function setup() {\n    var self;\n    var FLD;\n    var FLD_tab;\n    var FLD_addTab;\n    var FLD_tabOptions;\n    self = this;\n\n    if (Craft.FieldLayoutDesigner) {\n      FLD = Craft.FieldLayoutDesigner;\n      FLD_init = FLD.prototype.init;\n      FLD_tab = FLD.prototype.initTab;\n      FLD_addTab = FLD.prototype.addTab;\n      FLD_tabOptions = FLD.prototype.onFieldOptionSelect;\n\n      FLD.prototype.init = function () {\n        FLD_init.apply(this, arguments);\n        this.tabEditor = new TabEditor(this);\n      };\n\n      FLD.prototype.initTab = function ($tab) {\n        var $tabEl;\n        var $preview;\n        var $editBtn;\n        var $html;\n        var $menu;\n        var $ul;\n        var tabId;\n        var menu;\n        var menuBtn;\n        FLD_tab.apply(this, arguments);\n        tabId = $tab.find('.tab').data('id');\n\n        if (tabId) {\n          $editBtn = $tab.find('.tabs .settings');\n          menuBtn = $editBtn.data('menubtn');\n          menu = menuBtn.menu;\n          $menu = menu.$container;\n          $ul = $menu.children('ul');\n          $html = $('<li><a data-action=\"taboptions\">' + Craft.t('form-builder', 'Options') + '</a></li>').appendTo($ul);\n          $preview = $(['<div class=\"field-options-preview\"></div>'].join('')).appendTo($tab.find('.tab'));\n          return menu.addOptions($html.children('a'));\n        }\n      }, FLD.prototype.onTabOptionSelect = function (option) {\n        var $tab;\n        var $option;\n        var tabId;\n        var action;\n        FLD_tabOptions.apply(this, arguments);\n        $option = $(option);\n        $tab = $option.data('menu').$anchor.parent().parent().parent();\n        action = $option.data('action');\n        tabId = $tab.find('.tab').data('id');\n\n        switch (action) {\n          case 'rename':\n            {\n              this.renameTab($tab);\n              this.trigger('tabRenamed', {\n                tabId: tabId\n              });\n              break;\n            }\n\n          case 'delete':\n            {\n              this.deleteTab($tab);\n              break;\n            }\n\n          case 'taboptions':\n            this.trigger('tabOptionsSelected', {\n              target: $option[0],\n              $target: $option,\n              $tab: $tab,\n              fld: this,\n              tabId: tabId\n            });\n            break;\n        }\n      };\n\n      FLD.prototype.addTab = function () {\n        return self.addTab(this);\n      };\n    }\n  },\n  addTab: function addTab(e) {\n    if (!e.settings.customizableTabs) {\n      return;\n    }\n\n    var $tab = $('<div class=\"fld-tab\">' + '<div class=\"tabs\">' + '<div class=\"tab sel draggable\">' + '<span>Fieldset ' + (e.tabGrid.$items.length + 1) + '</span>' + '<a class=\"settings icon\" title=\"' + Craft.t('app', 'Rename') + '\"></a>' + '</div>' + '</div>' + '<div class=\"fld-tabcontent\"></div>' + '</div>').appendTo(e.$tabContainer);\n    e.tabGrid.addItems($tab);\n    e.tabDrag.addItems($tab);\n    e.initTab($tab);\n  },\n  getOptions: function getOptions(layoutId) {\n    var options;\n    options = {};\n    $.each(this.options, function (key, item) {\n      if (parseInt(item.layoutId) == layoutId) {\n        options[item.tabId] = item.options;\n      }\n    });\n    return options;\n  }\n}))();\nTabEditor = Garnish.Base.extend({\n  fld: null,\n  options: null,\n  layoutId: null,\n  namespace: 'form-builder',\n  init: function init(fld) {\n    this.fld = fld;\n    this.layoutId = LD.getLayoutId();\n    this.options = LD_Tabs.getOptions(this.layoutId);\n    this.fld.on('tabOptionsSelected', $.proxy(this.openOptionsModal, this));\n    this.fld.on('tabRenamed', $.proxy(this.onTabRenamed, this));\n\n    if (this.layoutId !== false) {\n      this.applyOptions(this.layoutId);\n    }\n  },\n  applyOptions: function applyOptions(layoutId) {\n    var _this = this;\n\n    var results;\n\n    if (this.options) {\n      results = [];\n      $.each(this.options, function (key, value) {\n        if (_this.options.hasOwnProperty(key)) {\n          options = JSON.parse(_this.options[key]);\n          results.push(_this.setFormData(key, JSON.parse(value)));\n        } else {\n          results.push(void 0);\n        }\n      });\n      return results;\n    }\n  },\n  onTabRenamed: function onTabRenamed(e) {\n    $tab = $('.tab-id-' + e.tabId);\n    $input = $tab.parent().find('.tab-name-field');\n    $labelSpan = $tab.find('span');\n    tabName = $labelSpan.text();\n    $input.val(tabName);\n  },\n  openOptionsModal: function openOptionsModal(e) {\n    var self;\n    self = this;\n    var modal;\n    var tabId;\n    var $tab = e.$tab;\n    var $labelSpan;\n    $labelSpan = $tab.find('.tabs .tab span');\n    var tabName = $labelSpan.text();\n    tabId = e.tabId;\n    modal = new TabOptionsModal($tab);\n    modal.on('setOptions', function (e) {\n      return self.setFormData(tabId, e.options, tabName);\n    });\n    modal.show(this.options);\n  },\n  setFormData: function setFormData(tabId, options, tabName) {\n    var self;\n    var $container;\n    var name;\n    self = this;\n    $container = $('[data-id=\"' + tabId + '\"]');\n    console.log($container);\n    name = this.namespace + '[tab][' + tabId + '][options]';\n    $.each(options, function (key, item) {\n      if ($container.children(\"input[name=\\\"\".concat(name, \"[\").concat(key, \"]\\\"]\")).length > 0) {\n        if (item) {\n          $container.children(\"input[name=\\\"\".concat(name, \"[\").concat(key, \"]\\\"]\")).val(item);\n          self.updatePreview(tabId, $container, key, item);\n        } else {\n          $container.children(\"input[name=\\\"\".concat(name, \"[\").concat(key, \"]\\\"]\")).remove();\n          self.removePreview(tabId, $container, key, item);\n        }\n      } else {\n        if (item) {\n          self.updatePreview(tabId, $container, key, item);\n          $(\"<input type=\\\"hidden\\\" name=\\\"\".concat(name, \"[\").concat(key, \"]\\\">\")).val(item).appendTo($container);\n        }\n      }\n    });\n    $container.find('.tab-name-field').val(tabName);\n  },\n  updatePreview: function updatePreview(tabId, tab, type, value) {\n    var target = $('[data-id=\"' + tabId + '\"]');\n    var body = target.find('.field-options-preview');\n    var markup = $('<div class=\"field-' + type + '-preview\"><span class=\"preview-type\">' + type + '</span> ' + value + '</div>');\n    var oldMarkup = body.find('.field-' + type + '-preview');\n\n    if (oldMarkup) {\n      oldMarkup.remove();\n    }\n\n    markup.appendTo(body);\n  },\n  removePreview: function removePreview(tabId, tab, type, value) {\n    var target = $('[data-id=\"' + tabId + '\"]');\n    target.find('.field-' + type + '-preview').remove();\n  }\n});\nTabOptionsModal = Garnish.Modal.extend({\n  tab: null,\n  form: null,\n  $formContainer: null,\n  init: function init(tab) {\n    var body;\n    this.tab = tab;\n    this.base();\n    this.$formContainer = $('<form class=\"modal fitted formbuilder-modal\">').appendTo(Garnish.$bod);\n    this.setContainer(this.$formContainer);\n    body = $(['<div class=\"header\">', \"<h1>\".concat(Craft.t('form-builder', 'Fieldset Options'), \"</h1>\"), '</div>', '<div class=\"body\">', '<div class=\"field\">', '<div class=\"heading\">', \"<label for=\\\"input-class\\\">\".concat(Craft.t('form-builder', 'Class'), \"</label>\"), '</div>', '<div class=\"input\">', '<input type=\"text\" id=\"input-class\" class=\"text ltr fullwidth input-class\">', '</div>', '</div>', '<div class=\"field\">', '<div class=\"heading\">', \"<label for=\\\"input-id\\\">\".concat(Craft.t('form-builder', 'ID'), \"</label>\"), '</div>', '<div class=\"input\">', '<input type=\"text\" id=\"input-id\" class=\"text ltr fullwidth input-id\">', '</div>', '</div>', '</div>', '<div class=\"footer\">', '<div class=\"buttons\">', \"<input type=\\\"button\\\" class=\\\"btn cancel\\\" value=\\\"\".concat(Craft.t('form-builder', 'Cancel'), \"\\\">\"), \"<input type=\\\"submit\\\" class=\\\"btn submit\\\" value=\\\"\".concat(Craft.t('form-builder', 'Save'), \"\\\">\"), '</div>', '</div>'].join('')).appendTo(this.$formContainer);\n    this.$inputClass = body.find('.input-class');\n    this.$inputId = body.find('.input-id');\n    this.$cancelBtn = body.find('.cancel');\n    this.loadModalValues();\n    this.addListener(this.$cancelBtn, 'click', 'hide');\n    this.addListener(this.$formContainer, 'submit', 'onFormSubmit');\n  },\n  loadModalValues: function loadModalValues() {\n    tabId = this.tab.find('.tab').data('id');\n    $classInput = $('input[name=\"form-builder[tab][' + tabId + '][options][class]\"]').val();\n    $idInput = $('input[name=\"form-builder[tab][' + tabId + '][options][id]\"]').val();\n\n    if ($classInput) {\n      this.$formContainer.find('.input-class').val($classInput);\n    }\n\n    if ($idInput) {\n      this.$formContainer.find('.input-id').val($idInput);\n    }\n  },\n  onFormSubmit: function onFormSubmit(e) {\n    e.preventDefault();\n\n    if (!this.visible) {\n      return;\n    }\n\n    this.trigger('setOptions', {\n      options: {\n        \"class\": this.$inputClass.val(),\n        id: this.$inputId.val()\n      }\n    });\n    this.hide();\n  },\n  onFadeOut: function onFadeOut() {\n    this.base();\n    this.destroy();\n  },\n  destroy: function destroy() {\n    this.base();\n    this.$container.remove();\n    this.$shade.remove();\n  },\n  show: function show(options) {\n    var self;\n    var values;\n\n    if (options.length > 0) {\n      values = JSON.parse(options[this.tab.name]);\n    }\n\n    $.each(values, function (key, value) {\n      if (key === 'class' && value) {\n        self.$inputClass.val(value);\n      }\n\n      if (key === 'id' && value) {\n        self.$inputId.val(value);\n      }\n    });\n\n    if (!Garnish.isMobileBrowser()) {\n      setTimeout($.proxy(function () {\n        this.$inputClass.focus();\n      }, this), 100);\n    }\n\n    this.base();\n  }\n});\nwindow.LD_Tabs = LD_Tabs;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./development/js/tab-designer.js\n");

/***/ }),

/***/ 7:
/*!**********************************************!*\
  !*** multi ./development/js/tab-designer.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Users/owldesign/Formbuilder/plugins/formbuilder/development/js/tab-designer.js */"./development/js/tab-designer.js");


/***/ })

/******/ });