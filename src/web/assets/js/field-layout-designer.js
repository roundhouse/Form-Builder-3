/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!*************************************************!*\
  !*** ./development/js/field-layout-designer.js ***!
  \*************************************************/
eval("var LayoutDesigner = {};\nLayoutDesigner = new (Garnish.Base.extend({\n  layoutId: null,\n  tabOptions: null,\n  fieldOptions: null,\n  init: function init() {\n    var self = this;\n    this.layoutId = $('#field-layout-id').val(); // this.tabOptions = $('#tab-options-data').data('data')\n\n    this.fieldOptions = $('#field-options-data').data('data');\n    var FLD = Craft.FieldLayoutDesigner;\n    var initFld = FLD.prototype.init; // let initTab = FLD.prototype.initTab\n\n    var initElement = FLD.prototype.initElement;\n    var tabOptions = FLD.prototype.onTabOptionSelect;\n\n    FLD.prototype.init = function () {\n      initFld.apply(this, arguments);\n      new TabEditor(this);\n      this.tabGrid.refreshCols(true);\n    }; // Init Tabs\n    // FLD.prototype.initTab = function ($tab) {\n    //     initTab.apply(this, arguments)\n    //     let tabId = $tab.find('.tab').data('id')\n    //     let tabIndex = $tab.find('.tab').data('index')\n    //\n    //     if (tabId) {\n    //         let $settingsBtn = $tab.find('.tabs .settings')\n    //         let menuBtn = $settingsBtn.data('menubtn')\n    //         let menu = menuBtn.menu\n    //         let $menuContainer = menu.$container\n    //         let $ul = $menuContainer.children('ul').first()\n    //         let $optionsHtml = $('<li><a data-action=\"options\">' + Craft.t('form-builder', 'Options') + '</a></li>').appendTo($ul)\n    //\n    //         $tab.find('.tab').after($('<div class=\"field-options-preview\"></div>'))\n    //\n    //         return menu.addOptions($optionsHtml.children('a'))\n    //     }\n    // }\n    // On tab option select\n    // FLD.prototype.onTabOptionSelect = function (option) {\n    //     tabOptions.apply(this, arguments)\n    //\n    //     let $option = $(option)\n    //     let $tab = $option.data('menu').$anchor.parent().parent().parent()\n    //     let action = $option.data('action')\n    //     let tabId = $tab.find('.tab').data('id')\n    //\n    //     switch (action) {\n    //         case 'options':\n    //             this.trigger('tabOptionsSelected', {\n    //                 target: $option[0],\n    //                 $target: $option,\n    //                 $tab: $tab,\n    //                 fld: this,\n    //                 tabId: tabId\n    //             })\n    //             break\n    //     }\n    // }\n    // Init Fields\n\n\n    FLD.prototype.initElement = function ($element) {\n      initElement.apply(this, arguments);\n      new FieldEditor(this, $element);\n    };\n  },\n  getLayoutId: function getLayoutId() {\n    return this.layoutId;\n  },\n  getTabOptions: function getTabOptions() {\n    var options = {};\n    $.each(this.tabOptions, function (key, item) {\n      if (parseInt(item.layoutId) === this.layoutId) {\n        options[item.tabId] = item.options;\n      }\n    });\n    return options;\n  },\n  getFieldOptions: function getFieldOptions(fieldId) {\n    var options = {};\n    $.each(this.fieldOptions, function (key, item) {\n      if (parseInt(item.fieldId) === fieldId) {\n        options = item;\n      }\n    });\n    return options;\n  }\n}))(); // Tab Editor\n\nTabEditor = Garnish.Base.extend({\n  fld: null,\n  options: null,\n  layoutId: null,\n  namespace: 'form-builder',\n  init: function init(fld) {\n    this.fld = fld;\n    this.layoutId = LayoutDesigner.getLayoutId();\n    this.options = LayoutDesigner.getTabOptions();\n    this.fld.on('tabOptionsSelected', $.proxy(this.openOptionsModal, this));\n\n    if (this.layoutId !== false) {\n      this.applyOptions();\n    }\n\n    this.initTabs();\n  },\n  initTabs: function initTabs() {\n    var $tabs = this.fld.$tabContainer.find('.tab');\n    this.addListener($tabs, 'click', this.handleTabToggle);\n  },\n  handleTabToggle: function handleTabToggle(e) {\n    e.preventDefault();\n    var $target = $(e.currentTarget);\n    var $container = $target.parent().parent();\n    var targetId = $target.data('target');\n    $container.find('.tab').removeClass('sel');\n    $target.addClass('sel');\n    $container.find('.tab-content').addClass('hidden');\n    $(\"#target-\".concat(targetId)).removeClass('hidden');\n    this.fld.tabGrid.refreshCols(true);\n  },\n  applyOptions: function applyOptions() {\n    var _this = this;\n\n    var results;\n\n    if (this.options) {\n      results = [];\n      $.each(this.options, function (key, value) {\n        if (_this.options.hasOwnProperty(key)) {\n          options = JSON.parse(_this.options[key]);\n          results.push(_this.setFormData(key, JSON.parse(value)));\n        } else {\n          results.push(void 0);\n        }\n      });\n      return results;\n    }\n  },\n  openOptionsModal: function openOptionsModal(e) {\n    var self;\n    self = this;\n    var modal;\n    var tabId;\n    var $tab = e.$tab;\n    var $labelSpan;\n    $labelSpan = $tab.find('.tabs .tab span');\n    var tabName = $labelSpan.text();\n    tabId = e.tabId;\n    modal = new TabOptionsModal($tab);\n    modal.on('setOptions', function (e) {\n      return self.setFormData(tabId, e.options, tabName);\n    });\n    modal.show(this.options);\n  },\n  setFormData: function setFormData(tabId, options, tabName) {\n    var self = this; // TODO: Rewrite this to use index as key not tabId\n\n    var $container = $('[data-id=\"' + tabId + '\"]').parent();\n    var name = this.namespace + '[tab][][' + tabId + '][options]';\n    $.each(options, function (key, item) {\n      if ($container.children(\"input[name=\\\"\".concat(name, \"[\").concat(key, \"]\\\"]\")).length > 0) {\n        if (item) {\n          $container.children(\"input[name=\\\"\".concat(name, \"[\").concat(key, \"]\\\"]\")).val(item);\n          self.updatePreview(tabId, $container, key, item);\n        } else {\n          $container.children(\"input[name=\\\"\".concat(name, \"[\").concat(key, \"]\\\"]\")).remove();\n          self.removePreview(tabId, $container, key, item);\n        }\n      } else {\n        if (item) {\n          self.updatePreview(tabId, $container, key, item);\n          $(\"<input type=\\\"hidden\\\" name=\\\"\".concat(name, \"[\").concat(key, \"]\\\">\")).val(item).appendTo($container);\n        }\n      }\n    });\n    $container.find('.tab-name-field').val(tabName);\n  },\n  updatePreview: function updatePreview(tabId, tab, type, value) {\n    var target = $('[data-id=\"' + tabId + '\"]').parent();\n    var body = target.find('.field-options-preview');\n    var $markup = $('<div class=\"field-' + type + '-preview\"><span class=\"preview-type\">' + type + '</span> ' + value + '</div>');\n    var $oldMarkup = body.find('.field-' + type + '-preview');\n\n    if ($oldMarkup) {\n      $oldMarkup.remove();\n    }\n\n    $markup.appendTo(body);\n    this.fld.tabGrid.refreshCols(true);\n  },\n  removePreview: function removePreview(tabId, tab, type, value) {\n    var $target = $('[data-id=\"' + tabId + '\"]').parent();\n    $target.find('.field-' + type + '-preview').remove();\n  }\n}); // Tab Options Modal\n\nTabOptionsModal = Garnish.Modal.extend({\n  tab: null,\n  form: null,\n  $form: null,\n  init: function init(tab) {\n    this.tab = tab;\n    this.base();\n    this.$form = $('<form class=\"modal fitted formbuilder-modal\">').appendTo(Garnish.$bod);\n    this.setContainer(this.$form);\n    var $header = $('<div class=\"header\"/>').appendTo(this.$form).html(\"<h1>\".concat(Craft.t('form-builder', 'Tab Attributes'), \"</h1>\"));\n    var $body = $('<div class=\"body\"/>').appendTo(this.$form);\n    var $footer = $('<footer class=\"footer\"/>').appendTo(this.$form);\n    var $buttons = $('<div class=\"buttons right\"/>').appendTo($footer);\n    var $fields = $(['<div class=\"field\">', \"<div class=\\\"heading\\\"><label>\".concat(Craft.t('form-builder', 'Class'), \"</label></div>\"), '<div class=\"input\">', '<div class=\"text\"><input type=\"text\" class=\"input-class\"></div>', '</div>', '</div>', '<div class=\"field\">', \"<div class=\\\"heading\\\"><label>\".concat(Craft.t('form-builder', 'ID'), \"</label></div>\"), '<div class=\"input\">', '<div class=\"text\"><input type=\"text\" class=\"input-id\"></div>', '</div>', '</div>'].join('')).appendTo($body);\n    this.$cancelBtn = $('<button/>', {\n      type: 'button',\n      \"class\": 'btn',\n      text: Craft.t('form-builder', 'Cancel')\n    }).appendTo($buttons);\n    this.$saveBtn = $('<button/>', {\n      type: 'submit',\n      \"class\": 'btn submit',\n      text: Craft.t('form-builder', 'Set')\n    }).appendTo($buttons);\n    this.$inputClass = this.$form.find('.input-class');\n    this.$inputId = this.$form.find('.input-id');\n    this.loadModalValues();\n    this.addListener(this.$cancelBtn, 'click', 'hide');\n    this.addListener(this.$form, 'submit', 'onFormSubmit');\n  },\n  loadModalValues: function loadModalValues() {\n    var tabId = this.tab.find('.tab').data('id');\n    var classInput = $('input[name=\"form-builder[tab][' + tabId + '][options][class]\"]').val();\n    var idInput = $('input[name=\"form-builder[tab][' + tabId + '][options][id]\"]').val();\n\n    if (classInput) {\n      this.$form.find('.input-class').val(classInput);\n    }\n\n    if (idInput) {\n      this.$form.find('.input-id').val(idInput);\n    }\n  },\n  onFormSubmit: function onFormSubmit(e) {\n    e.preventDefault();\n\n    if (!this.visible) {\n      return;\n    }\n\n    this.trigger('setOptions', {\n      options: {\n        \"class\": this.$inputClass.val(),\n        id: this.$inputId.val()\n      }\n    });\n    this.hide();\n  },\n  onFadeOut: function onFadeOut() {\n    this.base();\n    this.destroy();\n  },\n  destroy: function destroy() {\n    this.base();\n    this.$container.remove();\n    this.$shade.remove();\n  },\n  show: function show(options) {\n    var self;\n    var values;\n\n    if (options.length > 0) {\n      values = JSON.parse(options[this.tab.name]);\n    }\n\n    $.each(values, function (key, value) {\n      if (key === 'class' && value) {\n        self.$inputClass.val(value);\n      }\n\n      if (key === 'id' && value) {\n        self.$inputId.val(value);\n      }\n    });\n\n    if (!Garnish.isMobileBrowser()) {\n      setTimeout($.proxy(function () {\n        this.$inputClass.focus();\n      }, this), 100);\n    }\n\n    this.base();\n  }\n}); // Field Editor\n\nFieldEditor = Garnish.Base.extend({\n  fld: null,\n  $element: null,\n  fieldId: null,\n  options: null,\n  layoutId: null,\n  namespace: 'form-builder',\n  init: function init(fld, $element) {\n    var _this2 = this;\n\n    this.fld = fld;\n    this.$element = $element;\n    this.fieldId = this.$element.data('id');\n    this.layoutId = LayoutDesigner.getLayoutId();\n    this.options = LayoutDesigner.getFieldOptions(this.fieldId); // TODO: here you can mark field that are allowed or not allowed\n\n    var fieldId = $element.data('id');\n    $('<div class=\"field-options-preview\"></div>').appendTo(this.$element.find('.field-name'));\n\n    if (fieldId) {\n      var field = $element.data('fld-element');\n      var $fieldContainer = field.$container;\n      var $optionsTrigger = $('<a role=\"button\" tabindex=\"0\" data-action=\"options\" class=\"edit icon\" title=\"Options\"></a>');\n      $fieldContainer.find('.field-name').after($optionsTrigger);\n      this.applyOptions();\n      this.addListener($optionsTrigger, 'click', this.openOptionsModal);\n    }\n\n    this.on('setOptions', function (e) {\n      return _this2.setFormData(e.options);\n    });\n  },\n  applyOptions: function applyOptions() {\n    var results;\n\n    if (Object.keys(this.options).length > 0 && this.options.constructor === Object) {\n      this.setFormData(JSON.parse(this.options.options)); // results = []\n      // $.each(this.options, (key, value) => {\n      // console.log(key, value)\n      // if (this.options.hasOwnProperty(key)) {\n      //     let options = JSON.parse(this.options[key])\n      //     results.push(this.setFormData(key, JSON.parse(value)))\n      // } else {\n      //     results.push(void 0)\n      // }\n      // })\n      // return results\n    }\n  },\n  openOptionsModal: function openOptionsModal() {\n    var self = this;\n    var modal = new FieldOptionsModal(this);\n    modal.show(this.options);\n  },\n  setFormData: function setFormData(options) {\n    var _this3 = this;\n\n    var self = this;\n    var $container = this.fld.$container;\n    var name = this.namespace + '[field][' + this.fieldId + '][options]';\n    $.each(options, function (key, item) {\n      var $input = _this3.$element.find(\"input[name=\\\"\".concat(name, \"[\").concat(key, \"]\\\"]\"));\n\n      if ($input.length > 0) {\n        if (item) {\n          $input.val(item);\n          self.updatePreview(key, item);\n        } else {\n          $input.remove();\n          self.removePreview(key, item);\n        }\n      } else {\n        if (item) {\n          self.updatePreview(key, item);\n          $(\"<input type=\\\"hidden\\\" name=\\\"\".concat(name, \"[\").concat(key, \"]\\\">\")).val(item).appendTo(self.$element);\n        }\n      }\n    }); // $.each(options, (key, item) => {\n    //     if ($field.children(`input[name=\"${name}[${key}]\"]`).length > 0) {\n    //         if (item) {\n    //             $field.children(`input[name=\"${name}[${key}]\"]`).val(item)\n    //             self.updatePreview($field, key, item)\n    //         } else {\n    //             $field.children(`input[name=\"${name}[${key}]\"]`).remove()\n    //             self.removePreview($field, key, item)\n    //         }\n    //     } else {\n    //         if (item) {\n    //             self.updatePreview($field, key, item)\n    //             $(`<input type=\"hidden\" name=\"${name}[${key}]\">`).val(item).appendTo($field)\n    //         }\n    //     }\n    // })\n  },\n  updatePreview: function updatePreview(type, value) {\n    var $body = this.$element.find('.field-options-preview');\n    var $markup = $('<div class=\"field-' + type + '-preview\"><span class=\"preview-type\">' + type + '</span> ' + value + '</div>');\n    var $oldMarkup = $body.find('.field-' + type + '-preview');\n\n    if ($oldMarkup) {\n      $oldMarkup.remove();\n    }\n\n    $markup.appendTo($body);\n    this.fld.tabGrid.refreshCols(true);\n  },\n  removePreview: function removePreview(type) {\n    this.$element.find('.field-' + type + '-preview').remove();\n  }\n}); // Field Options Modal\n\nFieldOptionsModal = Garnish.Modal.extend({\n  field: null,\n  fieldId: null,\n  $form: null,\n  $classInput: null,\n  $idInput: null,\n  $templateInput: null,\n  init: function init(field) {\n    this.field = field;\n    this.fieldId = this.field.fieldId;\n    this.base();\n    this.$form = $('<form class=\"modal fitted formbuilder-modal\">').appendTo(Garnish.$bod);\n    this.setContainer(this.$form);\n    var $header = $('<div class=\"header\"/>').appendTo(this.$form).html(\"<h1>\".concat(Craft.t('form-builder', 'Field Attributes'), \"</h1>\"));\n    var $body = $('<div class=\"body\"/>').appendTo(this.$form);\n    var $footer = $('<footer class=\"footer\"/>').appendTo(this.$form);\n    var $buttons = $('<div class=\"buttons right\"/>').appendTo($footer);\n    var $fields = $(['<div class=\"field\">', \"<div class=\\\"heading\\\"><label>\".concat(Craft.t('form-builder', 'Class'), \"</label></div>\"), '<div class=\"input\">', '<div class=\"text\"><input type=\"text\" class=\"input-class\"></div>', '</div>', '</div>', '<div class=\"field\">', \"<div class=\\\"heading\\\"><label>\".concat(Craft.t('form-builder', 'ID'), \"</label></div>\"), '<div class=\"input\">', '<div class=\"text\"><input type=\"text\" class=\"input-id\"></div>', '</div>', '</div>', '<div class=\"field\">', \"<div class=\\\"heading\\\"><label>\".concat(Craft.t('form-builder', 'Input Template'), \"</label></div>\"), '<div class=\"input\">', '<div class=\"text\"><input type=\"text\" class=\"input-template\"></div>', '</div>', '</div>'].join('')).appendTo($body);\n    this.$cancelBtn = $('<button/>', {\n      type: 'button',\n      \"class\": 'btn',\n      text: Craft.t('form-builder', 'Cancel')\n    }).appendTo($buttons);\n    this.$saveBtn = $('<button/>', {\n      type: 'submit',\n      \"class\": 'btn submit',\n      text: Craft.t('form-builder', 'Set')\n    }).appendTo($buttons);\n    this.$classInput = $fields.find('.input-class');\n    this.$idInput = $fields.find('.input-id');\n    this.$templateInput = $fields.find('.input-template');\n    this.loadModalValues();\n    this.addListener(this.$cancelBtn, 'click', 'hide');\n    this.addListener(this.$form, 'submit', 'onFormSubmit');\n  },\n  loadModalValues: function loadModalValues() {\n    var $classInput = $('input[name=\"form-builder[field][' + this.fieldId + '][options][class]\"]').val();\n    var $idInput = $('input[name=\"form-builder[field][' + this.fieldId + '][options][id]\"]').val();\n    var $templateInput = $('input[name=\"form-builder[field][' + this.fieldId + '][options][template]\"]').val();\n\n    if ($classInput) {\n      this.$form.find('.input-class').val($classInput);\n    }\n\n    if ($idInput) {\n      this.$form.find('.input-id').val($idInput);\n    }\n\n    if ($templateInput) {\n      this.$form.find('.input-template').val($templateInput);\n    }\n  },\n  onFormSubmit: function onFormSubmit(e) {\n    e.preventDefault();\n\n    if (!this.visible) {\n      return;\n    }\n\n    this.field.trigger('setOptions', {\n      options: {\n        \"class\": this.$classInput.val(),\n        id: this.$idInput.val(),\n        template: this.$templateInput.val()\n      }\n    });\n    this.hide();\n  },\n  onFadeOut: function onFadeOut() {\n    this.base();\n    this.destroy();\n  },\n  destroy: function destroy() {\n    this.base();\n    this.$container.remove();\n    this.$shade.remove();\n  },\n  show: function show(options) {\n    var self = this;\n\n    if (options.length > 0) {\n      var values = JSON.parse(options[this.fieldId]);\n      $.each(values, function (key, value) {\n        if (key === 'class' && value) {\n          self.$classInput.val(value);\n        }\n\n        if (key === 'id' && value) {\n          self.$idInput.val(value);\n        }\n      });\n\n      if (!Garnish.isMobileBrowser()) {\n        setTimeout($.proxy(function () {\n          this.$classInput.focus();\n        }));\n      }\n    }\n\n    this.base();\n  }\n}); //         if (Craft.FieldLayoutDesigner) {\n//             FLD = Craft.FieldLayoutDesigner\n//             FLD_init = FLD.prototype.init\n//             FLD_field = FLD.prototype.initField\n//             FLD_fieldOptions = FLD.prototype.onFieldOptionSelect\n//\n//             FLD.prototype.init = function() {\n//                 FLD_init.apply(this, arguments)\n//                 this.fieldEditor = new FieldEditor(this)\n//             }\n//\n//             FLD.prototype.initField = function($field) {\n//                 let $preview\n//                 let $editBtn\n//                 let $html\n//                 let $menu\n//                 let $ul\n//                 let menu\n//                 let menuBtn\n//\n//                 FLD_field.apply(this, arguments)\n//\n//                 $editBtn = $field.find('.settings')\n//                 menuBtn = $editBtn.data('menubtn')\n//                 menu = menuBtn.menu\n//                 $menu = menu.$container\n//                 $ul = $menu.children('ul')\n//                 $html = $('<li><a data-action=\"fieldoptions\">' + Craft.t('form-builder', 'Options') + '</a></li>').appendTo($ul)\n//\n//                 $preview = $([\n//                     '<div class=\"field-options-preview\">',\n//                     '</div>'\n//                 ].join('')).appendTo($field)\n//\n//                 return menu.addOptions($html.children('a'))\n//             }\n//\n//             FLD.prototype.onFieldOptionSelect = function(option) {\n//                 let $field\n//                 let $option\n//                 let action\n//\n//                 FLD_fieldOptions.apply(this, arguments)\n//\n//                 $option = $(option)\n//                 $field = $option.data('menu').$anchor.parent()\n//                 action = $option.data('action')\n//\n//                 switch (action) {\n//                     case 'fieldoptions':\n//                         this.trigger('fieldOptionsSelected', {\n//                             target: $option[0],\n//                             $target: $option,\n//                             $field: $field,\n//                             fld: this,\n//                             id: $field.data('id') | 0\n//                         })\n//                 }\n//             }\n//         }\n//     },\n//\n//     getOptions(layoutId) {\n//         let options\n//         options = {}\n//\n//         $.each(this.options, (key, item) => {\n//             if (parseInt(item.fieldLayoutId) == layoutId) {\n//                 options[item.fieldId] = item.options\n//             }\n//         })\n//\n//         return options\n//     }\n// }))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kZXZlbG9wbWVudC9qcy9maWVsZC1sYXlvdXQtZGVzaWduZXIuanM/OTI2ZCJdLCJuYW1lcyI6WyJMYXlvdXREZXNpZ25lciIsIkdhcm5pc2giLCJCYXNlIiwiZXh0ZW5kIiwibGF5b3V0SWQiLCJ0YWJPcHRpb25zIiwiZmllbGRPcHRpb25zIiwiaW5pdCIsInNlbGYiLCIkIiwidmFsIiwiZGF0YSIsIkZMRCIsIkNyYWZ0IiwiRmllbGRMYXlvdXREZXNpZ25lciIsImluaXRGbGQiLCJwcm90b3R5cGUiLCJpbml0RWxlbWVudCIsIm9uVGFiT3B0aW9uU2VsZWN0IiwiYXBwbHkiLCJhcmd1bWVudHMiLCJUYWJFZGl0b3IiLCJ0YWJHcmlkIiwicmVmcmVzaENvbHMiLCIkZWxlbWVudCIsIkZpZWxkRWRpdG9yIiwiZ2V0TGF5b3V0SWQiLCJnZXRUYWJPcHRpb25zIiwib3B0aW9ucyIsImVhY2giLCJrZXkiLCJpdGVtIiwicGFyc2VJbnQiLCJ0YWJJZCIsImdldEZpZWxkT3B0aW9ucyIsImZpZWxkSWQiLCJmbGQiLCJuYW1lc3BhY2UiLCJvbiIsInByb3h5Iiwib3Blbk9wdGlvbnNNb2RhbCIsImFwcGx5T3B0aW9ucyIsImluaXRUYWJzIiwiJHRhYnMiLCIkdGFiQ29udGFpbmVyIiwiZmluZCIsImFkZExpc3RlbmVyIiwiaGFuZGxlVGFiVG9nZ2xlIiwiZSIsInByZXZlbnREZWZhdWx0IiwiJHRhcmdldCIsImN1cnJlbnRUYXJnZXQiLCIkY29udGFpbmVyIiwicGFyZW50IiwidGFyZ2V0SWQiLCJyZW1vdmVDbGFzcyIsImFkZENsYXNzIiwicmVzdWx0cyIsInZhbHVlIiwiaGFzT3duUHJvcGVydHkiLCJKU09OIiwicGFyc2UiLCJwdXNoIiwic2V0Rm9ybURhdGEiLCJtb2RhbCIsIiR0YWIiLCIkbGFiZWxTcGFuIiwidGFiTmFtZSIsInRleHQiLCJUYWJPcHRpb25zTW9kYWwiLCJzaG93IiwibmFtZSIsImNoaWxkcmVuIiwibGVuZ3RoIiwidXBkYXRlUHJldmlldyIsInJlbW92ZSIsInJlbW92ZVByZXZpZXciLCJhcHBlbmRUbyIsInRhYiIsInR5cGUiLCJ0YXJnZXQiLCJib2R5IiwiJG1hcmt1cCIsIiRvbGRNYXJrdXAiLCJNb2RhbCIsImZvcm0iLCIkZm9ybSIsImJhc2UiLCIkYm9kIiwic2V0Q29udGFpbmVyIiwiJGhlYWRlciIsImh0bWwiLCJ0IiwiJGJvZHkiLCIkZm9vdGVyIiwiJGJ1dHRvbnMiLCIkZmllbGRzIiwiam9pbiIsIiRjYW5jZWxCdG4iLCIkc2F2ZUJ0biIsIiRpbnB1dENsYXNzIiwiJGlucHV0SWQiLCJsb2FkTW9kYWxWYWx1ZXMiLCJjbGFzc0lucHV0IiwiaWRJbnB1dCIsIm9uRm9ybVN1Ym1pdCIsInZpc2libGUiLCJ0cmlnZ2VyIiwiaWQiLCJoaWRlIiwib25GYWRlT3V0IiwiZGVzdHJveSIsIiRzaGFkZSIsInZhbHVlcyIsImlzTW9iaWxlQnJvd3NlciIsInNldFRpbWVvdXQiLCJmb2N1cyIsImZpZWxkIiwiJGZpZWxkQ29udGFpbmVyIiwiJG9wdGlvbnNUcmlnZ2VyIiwiYWZ0ZXIiLCJPYmplY3QiLCJrZXlzIiwiY29uc3RydWN0b3IiLCJGaWVsZE9wdGlvbnNNb2RhbCIsIiRpbnB1dCIsIiRjbGFzc0lucHV0IiwiJGlkSW5wdXQiLCIkdGVtcGxhdGVJbnB1dCIsInRlbXBsYXRlIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxjQUFjLEdBQUcsRUFBckI7QUFFQUEsY0FBYyxHQUFHLEtBQUtDLE9BQU8sQ0FBQ0MsSUFBUixDQUFhQyxNQUFiLENBQW9CO0FBQ3RDQyxFQUFBQSxRQUFRLEVBQUUsSUFENEI7QUFFdENDLEVBQUFBLFVBQVUsRUFBRSxJQUYwQjtBQUd0Q0MsRUFBQUEsWUFBWSxFQUFFLElBSHdCO0FBS3RDQyxFQUFBQSxJQUxzQyxrQkFLL0I7QUFDSCxRQUFJQyxJQUFJLEdBQUcsSUFBWDtBQUNBLFNBQUtKLFFBQUwsR0FBZ0JLLENBQUMsQ0FBQyxrQkFBRCxDQUFELENBQXNCQyxHQUF0QixFQUFoQixD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QUFLLElBQVIsSUFBZ0I0QixLQUFwQixFQUEyQjtBQUN2QmxELFVBQUFBLElBQUksQ0FBQ3VILFFBQUwsQ0FBY3JILEdBQWQsQ0FBa0JnRCxLQUFsQjtBQUNIO0FBQ0osT0FSRDs7QUFVQSxVQUFJLENBQUN6RCxPQUFPLENBQUNpSCxlQUFSLEVBQUwsRUFBZ0M7QUFDNUJDLFFBQUFBLFVBQVUsQ0FBQzFHLENBQUMsQ0FBQzhCLEtBQUYsQ0FBUyxZQUFZO0FBQzVCLGVBQUt1RixXQUFMLENBQWlCVixLQUFqQjtBQUNILFNBRlUsQ0FBRCxDQUFWO0FBR0g7QUFDSjs7QUFFRCxTQUFLN0IsSUFBTDtBQUNIO0FBdElvQyxDQUFyQixDQUFwQixDLENBMElBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImxldCBMYXlvdXREZXNpZ25lciA9IHt9XG5cbkxheW91dERlc2lnbmVyID0gbmV3IChHYXJuaXNoLkJhc2UuZXh0ZW5kKHtcbiAgICBsYXlvdXRJZDogbnVsbCxcbiAgICB0YWJPcHRpb25zOiBudWxsLFxuICAgIGZpZWxkT3B0aW9uczogbnVsbCxcblxuICAgIGluaXQoKSB7XG4gICAgICAgIGxldCBzZWxmID0gdGhpc1xuICAgICAgICB0aGlzLmxheW91dElkID0gJCgnI2ZpZWxkLWxheW91dC1pZCcpLnZhbCgpXG4gICAgICAgIC8vIHRoaXMudGFiT3B0aW9ucyA9ICQoJyN0YWItb3B0aW9ucy1kYXRhJykuZGF0YSgnZGF0YScpXG4gICAgICAgIHRoaXMuZmllbGRPcHRpb25zID0gJCgnI2ZpZWxkLW9wdGlvbnMtZGF0YScpLmRhdGEoJ2RhdGEnKVxuXG4gICAgICAgIGxldCBGTEQgPSBDcmFmdC5GaWVsZExheW91dERlc2lnbmVyXG4gICAgICAgIGxldCBpbml0RmxkID0gRkxELnByb3RvdHlwZS5pbml0XG4gICAgICAgIC8vIGxldCBpbml0VGFiID0gRkxELnByb3RvdHlwZS5pbml0VGFiXG4gICAgICAgIGxldCBpbml0RWxlbWVudCA9IEZMRC5wcm90b3R5cGUuaW5pdEVsZW1lbnRcbiAgICAgICAgbGV0IHRhYk9wdGlvbnMgPSBGTEQucHJvdG90eXBlLm9uVGFiT3B0aW9uU2VsZWN0XG5cbiAgICAgICAgRkxELnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaW5pdEZsZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICAgICAgICBuZXcgVGFiRWRpdG9yKHRoaXMpXG4gICAgICAgICAgICB0aGlzLnRhYkdyaWQucmVmcmVzaENvbHModHJ1ZSlcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluaXQgVGFic1xuICAgICAgICAvLyBGTEQucHJvdG90eXBlLmluaXRUYWIgPSBmdW5jdGlvbiAoJHRhYikge1xuICAgICAgICAvLyAgICAgaW5pdFRhYi5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICAgIC8vICAgICBsZXQgdGFiSWQgPSAkdGFiLmZpbmQoJy50YWInKS5kYXRhKCdpZCcpXG4gICAgICAgIC8vICAgICBsZXQgdGFiSW5kZXggPSAkdGFiLmZpbmQoJy50YWInKS5kYXRhKCdpbmRleCcpXG4gICAgICAgIC8vXG4gICAgICAgIC8vICAgICBpZiAodGFiSWQpIHtcbiAgICAgICAgLy8gICAgICAgICBsZXQgJHNldHRpbmdzQnRuID0gJHRhYi5maW5kKCcudGFicyAuc2V0dGluZ3MnKVxuICAgICAgICAvLyAgICAgICAgIGxldCBtZW51QnRuID0gJHNldHRpbmdzQnRuLmRhdGEoJ21lbnVidG4nKVxuICAgICAgICAvLyAgICAgICAgIGxldCBtZW51ID0gbWVudUJ0bi5tZW51XG4gICAgICAgIC8vICAgICAgICAgbGV0ICRtZW51Q29udGFpbmVyID0gbWVudS4kY29udGFpbmVyXG4gICAgICAgIC8vICAgICAgICAgbGV0ICR1bCA9ICRtZW51Q29udGFpbmVyLmNoaWxkcmVuKCd1bCcpLmZpcnN0KClcbiAgICAgICAgLy8gICAgICAgICBsZXQgJG9wdGlvbnNIdG1sID0gJCgnPGxpPjxhIGRhdGEtYWN0aW9uPVwib3B0aW9uc1wiPicgKyBDcmFmdC50KCdmb3JtLWJ1aWxkZXInLCAnT3B0aW9ucycpICsgJzwvYT48L2xpPicpLmFwcGVuZFRvKCR1bClcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAgICAgICAkdGFiLmZpbmQoJy50YWInKS5hZnRlcigkKCc8ZGl2IGNsYXNzPVwiZmllbGQtb3B0aW9ucy1wcmV2aWV3XCI+PC9kaXY+JykpXG4gICAgICAgIC8vXG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuIG1lbnUuYWRkT3B0aW9ucygkb3B0aW9uc0h0bWwuY2hpbGRyZW4oJ2EnKSlcbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gfVxuXG4gICAgICAgIC8vIE9uIHRhYiBvcHRpb24gc2VsZWN0XG4gICAgICAgIC8vIEZMRC5wcm90b3R5cGUub25UYWJPcHRpb25TZWxlY3QgPSBmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICAgIC8vICAgICB0YWJPcHRpb25zLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAgIGxldCAkb3B0aW9uID0gJChvcHRpb24pXG4gICAgICAgIC8vICAgICBsZXQgJHRhYiA9ICRvcHRpb24uZGF0YSgnbWVudScpLiRhbmNob3IucGFyZW50KCkucGFyZW50KCkucGFyZW50KClcbiAgICAgICAgLy8gICAgIGxldCBhY3Rpb24gPSAkb3B0aW9uLmRhdGEoJ2FjdGlvbicpXG4gICAgICAgIC8vICAgICBsZXQgdGFiSWQgPSAkdGFiLmZpbmQoJy50YWInKS5kYXRhKCdpZCcpXG4gICAgICAgIC8vXG4gICAgICAgIC8vICAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgICAvLyAgICAgICAgIGNhc2UgJ29wdGlvbnMnOlxuICAgICAgICAvLyAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ3RhYk9wdGlvbnNTZWxlY3RlZCcsIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIHRhcmdldDogJG9wdGlvblswXSxcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICR0YXJnZXQ6ICRvcHRpb24sXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAkdGFiOiAkdGFiLFxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgZmxkOiB0aGlzLFxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgdGFiSWQ6IHRhYklkXG4gICAgICAgIC8vICAgICAgICAgICAgIH0pXG4gICAgICAgIC8vICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vIH1cblxuICAgICAgICAvLyBJbml0IEZpZWxkc1xuICAgICAgICBGTEQucHJvdG90eXBlLmluaXRFbGVtZW50ID0gZnVuY3Rpb24gKCRlbGVtZW50KSB7XG4gICAgICAgICAgICBpbml0RWxlbWVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICAgICAgICBuZXcgRmllbGRFZGl0b3IodGhpcywgJGVsZW1lbnQpXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0TGF5b3V0SWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxheW91dElkXG4gICAgfSxcblxuICAgIGdldFRhYk9wdGlvbnMoKSB7XG4gICAgICAgIGxldCBvcHRpb25zID0ge31cblxuICAgICAgICAkLmVhY2godGhpcy50YWJPcHRpb25zLCBmdW5jdGlvbiAoa2V5LCBpdGVtKSB7XG4gICAgICAgICAgICBpZiAocGFyc2VJbnQoaXRlbS5sYXlvdXRJZCkgPT09IHRoaXMubGF5b3V0SWQpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zW2l0ZW0udGFiSWRdID0gaXRlbS5vcHRpb25zXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgcmV0dXJuIG9wdGlvbnNcbiAgICB9LFxuXG4gICAgZ2V0RmllbGRPcHRpb25zKGZpZWxkSWQpIHtcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB7fVxuXG4gICAgICAgICQuZWFjaCh0aGlzLmZpZWxkT3B0aW9ucywgZnVuY3Rpb24gKGtleSwgaXRlbSkge1xuICAgICAgICAgICAgaWYgKHBhcnNlSW50KGl0ZW0uZmllbGRJZCkgPT09IGZpZWxkSWQpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gaXRlbVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIHJldHVybiBvcHRpb25zXG4gICAgfVxufSkpXG5cbi8vIFRhYiBFZGl0b3JcblRhYkVkaXRvciA9IEdhcm5pc2guQmFzZS5leHRlbmQoe1xuICAgIGZsZDogbnVsbCxcbiAgICBvcHRpb25zOiBudWxsLFxuICAgIGxheW91dElkOiBudWxsLFxuICAgIG5hbWVzcGFjZTogJ2Zvcm0tYnVpbGRlcicsXG5cbiAgICBpbml0KGZsZCkge1xuICAgICAgICB0aGlzLmZsZCA9IGZsZFxuICAgICAgICB0aGlzLmxheW91dElkID0gTGF5b3V0RGVzaWduZXIuZ2V0TGF5b3V0SWQoKVxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBMYXlvdXREZXNpZ25lci5nZXRUYWJPcHRpb25zKClcbiAgICAgICAgdGhpcy5mbGQub24oJ3RhYk9wdGlvbnNTZWxlY3RlZCcsICQucHJveHkodGhpcy5vcGVuT3B0aW9uc01vZGFsLCB0aGlzKSlcblxuICAgICAgICBpZiAodGhpcy5sYXlvdXRJZCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRoaXMuYXBwbHlPcHRpb25zKClcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaW5pdFRhYnMoKVxuICAgIH0sXG5cbiAgICBpbml0VGFicygpIHtcbiAgICAgICAgbGV0ICR0YWJzID0gdGhpcy5mbGQuJHRhYkNvbnRhaW5lci5maW5kKCcudGFiJylcblxuICAgICAgICB0aGlzLmFkZExpc3RlbmVyKCR0YWJzLCAnY2xpY2snLCB0aGlzLmhhbmRsZVRhYlRvZ2dsZSlcbiAgICB9LFxuXG4gICAgaGFuZGxlVGFiVG9nZ2xlKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICAgICAgbGV0ICR0YXJnZXQgPSAkKGUuY3VycmVudFRhcmdldClcbiAgICAgICAgbGV0ICRjb250YWluZXIgPSAkdGFyZ2V0LnBhcmVudCgpLnBhcmVudCgpXG5cbiAgICAgICAgbGV0IHRhcmdldElkID0gJHRhcmdldC5kYXRhKCd0YXJnZXQnKVxuICAgICAgICAkY29udGFpbmVyLmZpbmQoJy50YWInKS5yZW1vdmVDbGFzcygnc2VsJylcblxuICAgICAgICAkdGFyZ2V0LmFkZENsYXNzKCdzZWwnKVxuICAgICAgICAkY29udGFpbmVyLmZpbmQoJy50YWItY29udGVudCcpLmFkZENsYXNzKCdoaWRkZW4nKVxuICAgICAgICAkKGAjdGFyZ2V0LSR7dGFyZ2V0SWR9YCkucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpXG5cbiAgICAgICAgdGhpcy5mbGQudGFiR3JpZC5yZWZyZXNoQ29scyh0cnVlKVxuICAgIH0sXG5cbiAgICBhcHBseU9wdGlvbnMoKSB7XG4gICAgICAgIGxldCByZXN1bHRzXG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucykge1xuICAgICAgICAgICAgcmVzdWx0cyA9IFtdXG5cbiAgICAgICAgICAgICQuZWFjaCh0aGlzLm9wdGlvbnMsIChrZXksIHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMgPSBKU09OLnBhcnNlKHRoaXMub3B0aW9uc1trZXldKVxuICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2godGhpcy5zZXRGb3JtRGF0YShrZXksIEpTT04ucGFyc2UodmFsdWUpKSlcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2godm9pZCAwKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHRzXG5cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBvcGVuT3B0aW9uc01vZGFsKGUpIHtcbiAgICAgICAgbGV0IHNlbGZcbiAgICAgICAgc2VsZiA9IHRoaXNcbiAgICAgICAgbGV0IG1vZGFsXG4gICAgICAgIGxldCB0YWJJZFxuICAgICAgICBsZXQgJHRhYiA9IGUuJHRhYlxuICAgICAgICBsZXQgJGxhYmVsU3BhblxuXG4gICAgICAgICRsYWJlbFNwYW4gPSAkdGFiLmZpbmQoJy50YWJzIC50YWIgc3BhbicpXG4gICAgICAgIGxldCB0YWJOYW1lID0gJGxhYmVsU3Bhbi50ZXh0KClcbiAgICAgICAgdGFiSWQgPSBlLnRhYklkXG5cbiAgICAgICAgbW9kYWwgPSBuZXcgVGFiT3B0aW9uc01vZGFsKCR0YWIpXG4gICAgICAgIG1vZGFsLm9uKCdzZXRPcHRpb25zJywgZSA9PiBzZWxmLnNldEZvcm1EYXRhKHRhYklkLCBlLm9wdGlvbnMsIHRhYk5hbWUpKVxuICAgICAgICBtb2RhbC5zaG93KHRoaXMub3B0aW9ucylcbiAgICB9LFxuXG4gICAgc2V0Rm9ybURhdGEodGFiSWQsIG9wdGlvbnMsIHRhYk5hbWUpIHtcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzXG4gICAgICAgIC8vIFRPRE86IFJld3JpdGUgdGhpcyB0byB1c2UgaW5kZXggYXMga2V5IG5vdCB0YWJJZFxuXG4gICAgICAgIGxldCAkY29udGFpbmVyID0gJCgnW2RhdGEtaWQ9XCInICsgdGFiSWQgKyAnXCJdJykucGFyZW50KClcbiAgICAgICAgbGV0IG5hbWUgPSB0aGlzLm5hbWVzcGFjZSArICdbdGFiXVtdWycgKyB0YWJJZCArICddW29wdGlvbnNdJ1xuXG4gICAgICAgICQuZWFjaChvcHRpb25zLCAoa2V5LCBpdGVtKSA9PiB7XG4gICAgICAgICAgICBpZiAoJGNvbnRhaW5lci5jaGlsZHJlbihgaW5wdXRbbmFtZT1cIiR7bmFtZX1bJHtrZXl9XVwiXWApLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAkY29udGFpbmVyLmNoaWxkcmVuKGBpbnB1dFtuYW1lPVwiJHtuYW1lfVske2tleX1dXCJdYCkudmFsKGl0ZW0pXG4gICAgICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlUHJldmlldyh0YWJJZCwgJGNvbnRhaW5lciwga2V5LCBpdGVtKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICRjb250YWluZXIuY2hpbGRyZW4oYGlucHV0W25hbWU9XCIke25hbWV9WyR7a2V5fV1cIl1gKS5yZW1vdmUoKVxuICAgICAgICAgICAgICAgICAgICBzZWxmLnJlbW92ZVByZXZpZXcodGFiSWQsICRjb250YWluZXIsIGtleSwgaXRlbSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlUHJldmlldyh0YWJJZCwgJGNvbnRhaW5lciwga2V5LCBpdGVtKVxuICAgICAgICAgICAgICAgICAgICAkKGA8aW5wdXQgdHlwZT1cImhpZGRlblwiIG5hbWU9XCIke25hbWV9WyR7a2V5fV1cIj5gKS52YWwoaXRlbSkuYXBwZW5kVG8oJGNvbnRhaW5lcilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgJGNvbnRhaW5lci5maW5kKCcudGFiLW5hbWUtZmllbGQnKS52YWwodGFiTmFtZSlcbiAgICB9LFxuXG4gICAgdXBkYXRlUHJldmlldyh0YWJJZCwgdGFiLCB0eXBlLCB2YWx1ZSkge1xuICAgICAgICBsZXQgdGFyZ2V0ID0gJCgnW2RhdGEtaWQ9XCInICsgdGFiSWQgKyAnXCJdJykucGFyZW50KClcbiAgICAgICAgbGV0IGJvZHkgPSB0YXJnZXQuZmluZCgnLmZpZWxkLW9wdGlvbnMtcHJldmlldycpXG4gICAgICAgIGxldCAkbWFya3VwID0gJCgnPGRpdiBjbGFzcz1cImZpZWxkLScgKyB0eXBlICsgJy1wcmV2aWV3XCI+PHNwYW4gY2xhc3M9XCJwcmV2aWV3LXR5cGVcIj4nICsgdHlwZSArICc8L3NwYW4+ICcgKyB2YWx1ZSArICc8L2Rpdj4nKVxuICAgICAgICBsZXQgJG9sZE1hcmt1cCA9IGJvZHkuZmluZCgnLmZpZWxkLScgKyB0eXBlICsgJy1wcmV2aWV3JylcblxuICAgICAgICBpZiAoJG9sZE1hcmt1cCkge1xuICAgICAgICAgICAgJG9sZE1hcmt1cC5yZW1vdmUoKVxuICAgICAgICB9XG5cbiAgICAgICAgJG1hcmt1cC5hcHBlbmRUbyhib2R5KVxuXG4gICAgICAgIHRoaXMuZmxkLnRhYkdyaWQucmVmcmVzaENvbHModHJ1ZSlcbiAgICB9LFxuXG4gICAgcmVtb3ZlUHJldmlldyh0YWJJZCwgdGFiLCB0eXBlLCB2YWx1ZSkge1xuICAgICAgICBsZXQgJHRhcmdldCA9ICQoJ1tkYXRhLWlkPVwiJyArIHRhYklkICsgJ1wiXScpLnBhcmVudCgpXG4gICAgICAgICR0YXJnZXQuZmluZCgnLmZpZWxkLScgKyB0eXBlICsgJy1wcmV2aWV3JykucmVtb3ZlKClcbiAgICB9XG5cbn0pXG5cbi8vIFRhYiBPcHRpb25zIE1vZGFsXG5UYWJPcHRpb25zTW9kYWwgPSBHYXJuaXNoLk1vZGFsLmV4dGVuZCh7XG4gICAgdGFiOiBudWxsLFxuICAgIGZvcm06IG51bGwsXG4gICAgJGZvcm06IG51bGwsXG5cbiAgICBpbml0KHRhYikge1xuICAgICAgICB0aGlzLnRhYiA9IHRhYlxuICAgICAgICB0aGlzLmJhc2UoKVxuXG4gICAgICAgIHRoaXMuJGZvcm0gPSAkKCc8Zm9ybSBjbGFzcz1cIm1vZGFsIGZpdHRlZCBmb3JtYnVpbGRlci1tb2RhbFwiPicpLmFwcGVuZFRvKEdhcm5pc2guJGJvZClcbiAgICAgICAgdGhpcy5zZXRDb250YWluZXIodGhpcy4kZm9ybSlcbiAgICAgICAgbGV0ICRoZWFkZXIgPSAkKCc8ZGl2IGNsYXNzPVwiaGVhZGVyXCIvPicpLmFwcGVuZFRvKHRoaXMuJGZvcm0pLmh0bWwoYDxoMT4ke0NyYWZ0LnQoJ2Zvcm0tYnVpbGRlcicsICdUYWIgQXR0cmlidXRlcycpfTwvaDE+YClcbiAgICAgICAgbGV0ICRib2R5ID0gJCgnPGRpdiBjbGFzcz1cImJvZHlcIi8+JykuYXBwZW5kVG8odGhpcy4kZm9ybSlcbiAgICAgICAgbGV0ICRmb290ZXIgPSAkKCc8Zm9vdGVyIGNsYXNzPVwiZm9vdGVyXCIvPicpLmFwcGVuZFRvKHRoaXMuJGZvcm0pXG4gICAgICAgIGxldCAkYnV0dG9ucyA9ICQoJzxkaXYgY2xhc3M9XCJidXR0b25zIHJpZ2h0XCIvPicpLmFwcGVuZFRvKCRmb290ZXIpXG5cbiAgICAgICAgbGV0ICRmaWVsZHMgPSAkKFtcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZmllbGRcIj4nLFxuICAgICAgICAgICAgYDxkaXYgY2xhc3M9XCJoZWFkaW5nXCI+PGxhYmVsPiR7Q3JhZnQudCgnZm9ybS1idWlsZGVyJywgJ0NsYXNzJyl9PC9sYWJlbD48L2Rpdj5gLFxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJpbnB1dFwiPicsXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInRleHRcIj48aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImlucHV0LWNsYXNzXCI+PC9kaXY+JyxcbiAgICAgICAgICAgICc8L2Rpdj4nLFxuICAgICAgICAgICAgJzwvZGl2PicsXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cImZpZWxkXCI+JyxcbiAgICAgICAgICAgIGA8ZGl2IGNsYXNzPVwiaGVhZGluZ1wiPjxsYWJlbD4ke0NyYWZ0LnQoJ2Zvcm0tYnVpbGRlcicsICdJRCcpfTwvbGFiZWw+PC9kaXY+YCxcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiaW5wdXRcIj4nLFxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJ0ZXh0XCI+PGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJpbnB1dC1pZFwiPjwvZGl2PicsXG4gICAgICAgICAgICAnPC9kaXY+JyxcbiAgICAgICAgICAgICc8L2Rpdj4nLFxuICAgICAgICBdLmpvaW4oJycpKS5hcHBlbmRUbygkYm9keSlcblxuICAgICAgICB0aGlzLiRjYW5jZWxCdG4gPSAkKCc8YnV0dG9uLz4nLCB7XG4gICAgICAgICAgICB0eXBlOiAnYnV0dG9uJyxcbiAgICAgICAgICAgIGNsYXNzOiAnYnRuJyxcbiAgICAgICAgICAgIHRleHQ6IENyYWZ0LnQoJ2Zvcm0tYnVpbGRlcicsICdDYW5jZWwnKSxcbiAgICAgICAgfSkuYXBwZW5kVG8oJGJ1dHRvbnMpXG5cbiAgICAgICAgdGhpcy4kc2F2ZUJ0biA9ICQoJzxidXR0b24vPicsIHtcbiAgICAgICAgICAgIHR5cGU6ICdzdWJtaXQnLFxuICAgICAgICAgICAgY2xhc3M6ICdidG4gc3VibWl0JyxcbiAgICAgICAgICAgIHRleHQ6IENyYWZ0LnQoJ2Zvcm0tYnVpbGRlcicsICdTZXQnKSxcbiAgICAgICAgfSkuYXBwZW5kVG8oJGJ1dHRvbnMpXG5cbiAgICAgICAgdGhpcy4kaW5wdXRDbGFzcyA9IHRoaXMuJGZvcm0uZmluZCgnLmlucHV0LWNsYXNzJylcbiAgICAgICAgdGhpcy4kaW5wdXRJZCA9IHRoaXMuJGZvcm0uZmluZCgnLmlucHV0LWlkJylcblxuICAgICAgICB0aGlzLmxvYWRNb2RhbFZhbHVlcygpXG5cbiAgICAgICAgdGhpcy5hZGRMaXN0ZW5lcih0aGlzLiRjYW5jZWxCdG4sICdjbGljaycsICdoaWRlJylcbiAgICAgICAgdGhpcy5hZGRMaXN0ZW5lcih0aGlzLiRmb3JtLCAnc3VibWl0JywgJ29uRm9ybVN1Ym1pdCcpXG4gICAgfSxcblxuICAgIGxvYWRNb2RhbFZhbHVlcygpIHtcbiAgICAgICAgbGV0IHRhYklkID0gdGhpcy50YWIuZmluZCgnLnRhYicpLmRhdGEoJ2lkJylcbiAgICAgICAgbGV0IGNsYXNzSW5wdXQgPSAkKCdpbnB1dFtuYW1lPVwiZm9ybS1idWlsZGVyW3RhYl1bJyArIHRhYklkICsgJ11bb3B0aW9uc11bY2xhc3NdXCJdJykudmFsKClcbiAgICAgICAgbGV0IGlkSW5wdXQgPSAkKCdpbnB1dFtuYW1lPVwiZm9ybS1idWlsZGVyW3RhYl1bJyArIHRhYklkICsgJ11bb3B0aW9uc11baWRdXCJdJykudmFsKClcblxuICAgICAgICBpZiAoY2xhc3NJbnB1dCkge1xuICAgICAgICAgICAgdGhpcy4kZm9ybS5maW5kKCcuaW5wdXQtY2xhc3MnKS52YWwoY2xhc3NJbnB1dClcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpZElucHV0KSB7XG4gICAgICAgICAgICB0aGlzLiRmb3JtLmZpbmQoJy5pbnB1dC1pZCcpLnZhbChpZElucHV0KVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIG9uRm9ybVN1Ym1pdChlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuXG4gICAgICAgIGlmICghdGhpcy52aXNpYmxlKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudHJpZ2dlcignc2V0T3B0aW9ucycsIHtcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBcImNsYXNzXCI6IHRoaXMuJGlucHV0Q2xhc3MudmFsKCksXG4gICAgICAgICAgICAgICAgaWQ6IHRoaXMuJGlucHV0SWQudmFsKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLmhpZGUoKVxuICAgIH0sXG5cbiAgICBvbkZhZGVPdXQoKSB7XG4gICAgICAgIHRoaXMuYmFzZSgpXG4gICAgICAgIHRoaXMuZGVzdHJveSgpXG4gICAgfSxcblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuYmFzZSgpXG4gICAgICAgIHRoaXMuJGNvbnRhaW5lci5yZW1vdmUoKVxuICAgICAgICB0aGlzLiRzaGFkZS5yZW1vdmUoKVxuICAgIH0sXG5cbiAgICBzaG93KG9wdGlvbnMpIHtcbiAgICAgICAgbGV0IHNlbGZcbiAgICAgICAgbGV0IHZhbHVlc1xuXG4gICAgICAgIGlmIChvcHRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhbHVlcyA9IEpTT04ucGFyc2Uob3B0aW9uc1t0aGlzLnRhYi5uYW1lXSlcbiAgICAgICAgfVxuXG4gICAgICAgICQuZWFjaCh2YWx1ZXMsIChrZXksIHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBpZiAoa2V5ID09PSAnY2xhc3MnICYmIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgc2VsZi4kaW5wdXRDbGFzcy52YWwodmFsdWUpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChrZXkgPT09ICdpZCcgJiYgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBzZWxmLiRpbnB1dElkLnZhbCh2YWx1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICBpZiAoIUdhcm5pc2guaXNNb2JpbGVCcm93c2VyKCkpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoJC5wcm94eSgoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuJGlucHV0Q2xhc3MuZm9jdXMoKTtcbiAgICAgICAgICAgIH0pLCB0aGlzKSwgMTAwKVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5iYXNlKClcbiAgICB9XG5cblxufSlcblxuLy8gRmllbGQgRWRpdG9yXG5GaWVsZEVkaXRvciA9IEdhcm5pc2guQmFzZS5leHRlbmQoe1xuICAgIGZsZDogbnVsbCxcbiAgICAkZWxlbWVudDogbnVsbCxcbiAgICBmaWVsZElkOiBudWxsLFxuICAgIG9wdGlvbnM6IG51bGwsXG4gICAgbGF5b3V0SWQ6IG51bGwsXG4gICAgbmFtZXNwYWNlOiAnZm9ybS1idWlsZGVyJyxcblxuICAgIGluaXQoZmxkLCAkZWxlbWVudCkge1xuICAgICAgICB0aGlzLmZsZCA9IGZsZFxuICAgICAgICB0aGlzLiRlbGVtZW50ID0gJGVsZW1lbnRcbiAgICAgICAgdGhpcy5maWVsZElkID0gdGhpcy4kZWxlbWVudC5kYXRhKCdpZCcpXG4gICAgICAgIHRoaXMubGF5b3V0SWQgPSBMYXlvdXREZXNpZ25lci5nZXRMYXlvdXRJZCgpXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IExheW91dERlc2lnbmVyLmdldEZpZWxkT3B0aW9ucyh0aGlzLmZpZWxkSWQpXG5cbiAgICAgICAgLy8gVE9ETzogaGVyZSB5b3UgY2FuIG1hcmsgZmllbGQgdGhhdCBhcmUgYWxsb3dlZCBvciBub3QgYWxsb3dlZFxuICAgICAgICBsZXQgZmllbGRJZCA9ICRlbGVtZW50LmRhdGEoJ2lkJylcblxuICAgICAgICAkKCc8ZGl2IGNsYXNzPVwiZmllbGQtb3B0aW9ucy1wcmV2aWV3XCI+PC9kaXY+JykuYXBwZW5kVG8odGhpcy4kZWxlbWVudC5maW5kKCcuZmllbGQtbmFtZScpKVxuXG4gICAgICAgIGlmIChmaWVsZElkKSB7XG4gICAgICAgICAgICBsZXQgZmllbGQgPSAkZWxlbWVudC5kYXRhKCdmbGQtZWxlbWVudCcpXG4gICAgICAgICAgICBsZXQgJGZpZWxkQ29udGFpbmVyID0gZmllbGQuJGNvbnRhaW5lclxuICAgICAgICAgICAgbGV0ICRvcHRpb25zVHJpZ2dlciA9ICQoJzxhIHJvbGU9XCJidXR0b25cIiB0YWJpbmRleD1cIjBcIiBkYXRhLWFjdGlvbj1cIm9wdGlvbnNcIiBjbGFzcz1cImVkaXQgaWNvblwiIHRpdGxlPVwiT3B0aW9uc1wiPjwvYT4nKVxuICAgICAgICAgICAgJGZpZWxkQ29udGFpbmVyLmZpbmQoJy5maWVsZC1uYW1lJykuYWZ0ZXIoJG9wdGlvbnNUcmlnZ2VyKVxuXG4gICAgICAgICAgICB0aGlzLmFwcGx5T3B0aW9ucygpXG5cbiAgICAgICAgICAgIHRoaXMuYWRkTGlzdGVuZXIoJG9wdGlvbnNUcmlnZ2VyLCAnY2xpY2snLCB0aGlzLm9wZW5PcHRpb25zTW9kYWwpXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm9uKCdzZXRPcHRpb25zJywgZSA9PiB0aGlzLnNldEZvcm1EYXRhKGUub3B0aW9ucykpXG4gICAgfSxcblxuICAgIGFwcGx5T3B0aW9ucygpIHtcbiAgICAgICAgbGV0IHJlc3VsdHNcblxuICAgICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5vcHRpb25zKS5sZW5ndGggPiAwICYmIHRoaXMub3B0aW9ucy5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XG5cbiAgICAgICAgICAgIHRoaXMuc2V0Rm9ybURhdGEoSlNPTi5wYXJzZSh0aGlzLm9wdGlvbnMub3B0aW9ucykpXG5cbiAgICAgICAgICAgIC8vIHJlc3VsdHMgPSBbXVxuXG4gICAgICAgICAgICAvLyAkLmVhY2godGhpcy5vcHRpb25zLCAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGtleSwgdmFsdWUpXG4gICAgICAgICAgICAgICAgLy8gaWYgKHRoaXMub3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgLy8gICAgIGxldCBvcHRpb25zID0gSlNPTi5wYXJzZSh0aGlzLm9wdGlvbnNba2V5XSlcbiAgICAgICAgICAgICAgICAvLyAgICAgcmVzdWx0cy5wdXNoKHRoaXMuc2V0Rm9ybURhdGEoa2V5LCBKU09OLnBhcnNlKHZhbHVlKSkpXG4gICAgICAgICAgICAgICAgLy8gfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgcmVzdWx0cy5wdXNoKHZvaWQgMClcbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAvLyB9KVxuXG4gICAgICAgICAgICAvLyByZXR1cm4gcmVzdWx0c1xuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgb3Blbk9wdGlvbnNNb2RhbCgpIHtcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzXG5cbiAgICAgICAgbGV0IG1vZGFsID0gbmV3IEZpZWxkT3B0aW9uc01vZGFsKHRoaXMpXG4gICAgICAgIG1vZGFsLnNob3codGhpcy5vcHRpb25zKVxuICAgIH0sXG5cbiAgICBzZXRGb3JtRGF0YShvcHRpb25zKSB7XG4gICAgICAgIGxldCBzZWxmID0gdGhpc1xuXG4gICAgICAgIGxldCAkY29udGFpbmVyID0gdGhpcy5mbGQuJGNvbnRhaW5lclxuICAgICAgICBsZXQgbmFtZSA9IHRoaXMubmFtZXNwYWNlICsgJ1tmaWVsZF1bJyArIHRoaXMuZmllbGRJZCArICddW29wdGlvbnNdJ1xuXG4gICAgICAgICQuZWFjaChvcHRpb25zLCAoa2V5LCBpdGVtKSA9PiB7XG4gICAgICAgICAgICBsZXQgJGlucHV0ID0gdGhpcy4kZWxlbWVudC5maW5kKGBpbnB1dFtuYW1lPVwiJHtuYW1lfVske2tleX1dXCJdYClcblxuICAgICAgICAgICAgaWYgKCRpbnB1dC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgJGlucHV0LnZhbChpdGVtKVxuICAgICAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZVByZXZpZXcoa2V5LCBpdGVtKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICRpbnB1dC5yZW1vdmUoKVxuICAgICAgICAgICAgICAgICAgICBzZWxmLnJlbW92ZVByZXZpZXcoa2V5LCBpdGVtKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi51cGRhdGVQcmV2aWV3KGtleSwgaXRlbSlcbiAgICAgICAgICAgICAgICAgICAgJChgPGlucHV0IHR5cGU9XCJoaWRkZW5cIiBuYW1lPVwiJHtuYW1lfVske2tleX1dXCI+YCkudmFsKGl0ZW0pLmFwcGVuZFRvKHNlbGYuJGVsZW1lbnQpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIC8vICQuZWFjaChvcHRpb25zLCAoa2V5LCBpdGVtKSA9PiB7XG4gICAgICAgIC8vICAgICBpZiAoJGZpZWxkLmNoaWxkcmVuKGBpbnB1dFtuYW1lPVwiJHtuYW1lfVske2tleX1dXCJdYCkubGVuZ3RoID4gMCkge1xuICAgICAgICAvLyAgICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgIC8vICAgICAgICAgICAgICRmaWVsZC5jaGlsZHJlbihgaW5wdXRbbmFtZT1cIiR7bmFtZX1bJHtrZXl9XVwiXWApLnZhbChpdGVtKVxuICAgICAgICAvLyAgICAgICAgICAgICBzZWxmLnVwZGF0ZVByZXZpZXcoJGZpZWxkLCBrZXksIGl0ZW0pXG4gICAgICAgIC8vICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgJGZpZWxkLmNoaWxkcmVuKGBpbnB1dFtuYW1lPVwiJHtuYW1lfVske2tleX1dXCJdYCkucmVtb3ZlKClcbiAgICAgICAgLy8gICAgICAgICAgICAgc2VsZi5yZW1vdmVQcmV2aWV3KCRmaWVsZCwga2V5LCBpdGVtKVxuICAgICAgICAvLyAgICAgICAgIH1cbiAgICAgICAgLy8gICAgIH0gZWxzZSB7XG4gICAgICAgIC8vICAgICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgc2VsZi51cGRhdGVQcmV2aWV3KCRmaWVsZCwga2V5LCBpdGVtKVxuICAgICAgICAvLyAgICAgICAgICAgICAkKGA8aW5wdXQgdHlwZT1cImhpZGRlblwiIG5hbWU9XCIke25hbWV9WyR7a2V5fV1cIj5gKS52YWwoaXRlbSkuYXBwZW5kVG8oJGZpZWxkKVxuICAgICAgICAvLyAgICAgICAgIH1cbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gfSlcbiAgICB9LFxuXG4gICAgdXBkYXRlUHJldmlldyh0eXBlLCB2YWx1ZSkge1xuICAgICAgICBsZXQgJGJvZHkgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5maWVsZC1vcHRpb25zLXByZXZpZXcnKVxuICAgICAgICBsZXQgJG1hcmt1cCA9ICQoJzxkaXYgY2xhc3M9XCJmaWVsZC0nICsgdHlwZSArICctcHJldmlld1wiPjxzcGFuIGNsYXNzPVwicHJldmlldy10eXBlXCI+JyArIHR5cGUgKyAnPC9zcGFuPiAnICsgdmFsdWUgKyAnPC9kaXY+JylcbiAgICAgICAgbGV0ICRvbGRNYXJrdXAgPSAkYm9keS5maW5kKCcuZmllbGQtJyArIHR5cGUgKyAnLXByZXZpZXcnKVxuXG4gICAgICAgIGlmICgkb2xkTWFya3VwKSB7XG4gICAgICAgICAgICAkb2xkTWFya3VwLnJlbW92ZSgpXG4gICAgICAgIH1cblxuICAgICAgICAkbWFya3VwLmFwcGVuZFRvKCRib2R5KVxuXG4gICAgICAgIHRoaXMuZmxkLnRhYkdyaWQucmVmcmVzaENvbHModHJ1ZSlcbiAgICB9LFxuXG4gICAgcmVtb3ZlUHJldmlldyh0eXBlKSB7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnLmZpZWxkLScgKyB0eXBlICsgJy1wcmV2aWV3JykucmVtb3ZlKClcbiAgICB9XG59KVxuXG4vLyBGaWVsZCBPcHRpb25zIE1vZGFsXG5GaWVsZE9wdGlvbnNNb2RhbCA9IEdhcm5pc2guTW9kYWwuZXh0ZW5kKHtcbiAgICBmaWVsZDogbnVsbCxcbiAgICBmaWVsZElkOiBudWxsLFxuICAgICRmb3JtOiBudWxsLFxuICAgICRjbGFzc0lucHV0OiBudWxsLFxuICAgICRpZElucHV0OiBudWxsLFxuICAgICR0ZW1wbGF0ZUlucHV0OiBudWxsLFxuXG4gICAgaW5pdChmaWVsZCkge1xuICAgICAgICB0aGlzLmZpZWxkID0gZmllbGRcbiAgICAgICAgdGhpcy5maWVsZElkID0gdGhpcy5maWVsZC5maWVsZElkXG4gICAgICAgIHRoaXMuYmFzZSgpXG4gICAgICAgIHRoaXMuJGZvcm0gPSAkKCc8Zm9ybSBjbGFzcz1cIm1vZGFsIGZpdHRlZCBmb3JtYnVpbGRlci1tb2RhbFwiPicpLmFwcGVuZFRvKEdhcm5pc2guJGJvZClcbiAgICAgICAgdGhpcy5zZXRDb250YWluZXIodGhpcy4kZm9ybSlcblxuICAgICAgICBsZXQgJGhlYWRlciA9ICQoJzxkaXYgY2xhc3M9XCJoZWFkZXJcIi8+JykuYXBwZW5kVG8odGhpcy4kZm9ybSkuaHRtbChgPGgxPiR7Q3JhZnQudCgnZm9ybS1idWlsZGVyJywgJ0ZpZWxkIEF0dHJpYnV0ZXMnKX08L2gxPmApXG4gICAgICAgIGxldCAkYm9keSA9ICQoJzxkaXYgY2xhc3M9XCJib2R5XCIvPicpLmFwcGVuZFRvKHRoaXMuJGZvcm0pXG4gICAgICAgIGxldCAkZm9vdGVyID0gJCgnPGZvb3RlciBjbGFzcz1cImZvb3RlclwiLz4nKS5hcHBlbmRUbyh0aGlzLiRmb3JtKVxuICAgICAgICBsZXQgJGJ1dHRvbnMgPSAkKCc8ZGl2IGNsYXNzPVwiYnV0dG9ucyByaWdodFwiLz4nKS5hcHBlbmRUbygkZm9vdGVyKVxuXG4gICAgICAgIGxldCAkZmllbGRzID0gJChbXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cImZpZWxkXCI+JyxcbiAgICAgICAgICAgIGA8ZGl2IGNsYXNzPVwiaGVhZGluZ1wiPjxsYWJlbD4ke0NyYWZ0LnQoJ2Zvcm0tYnVpbGRlcicsICdDbGFzcycpfTwvbGFiZWw+PC9kaXY+YCxcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiaW5wdXRcIj4nLFxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJ0ZXh0XCI+PGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJpbnB1dC1jbGFzc1wiPjwvZGl2PicsXG4gICAgICAgICAgICAnPC9kaXY+JyxcbiAgICAgICAgICAgICc8L2Rpdj4nLFxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJmaWVsZFwiPicsXG4gICAgICAgICAgICBgPGRpdiBjbGFzcz1cImhlYWRpbmdcIj48bGFiZWw+JHtDcmFmdC50KCdmb3JtLWJ1aWxkZXInLCAnSUQnKX08L2xhYmVsPjwvZGl2PmAsXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cImlucHV0XCI+JyxcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwidGV4dFwiPjxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiaW5wdXQtaWRcIj48L2Rpdj4nLFxuICAgICAgICAgICAgJzwvZGl2PicsXG4gICAgICAgICAgICAnPC9kaXY+JyxcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZmllbGRcIj4nLFxuICAgICAgICAgICAgYDxkaXYgY2xhc3M9XCJoZWFkaW5nXCI+PGxhYmVsPiR7Q3JhZnQudCgnZm9ybS1idWlsZGVyJywgJ0lucHV0IFRlbXBsYXRlJyl9PC9sYWJlbD48L2Rpdj5gLFxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJpbnB1dFwiPicsXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInRleHRcIj48aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImlucHV0LXRlbXBsYXRlXCI+PC9kaXY+JyxcbiAgICAgICAgICAgICc8L2Rpdj4nLFxuICAgICAgICAgICAgJzwvZGl2PicsXG4gICAgICAgIF0uam9pbignJykpLmFwcGVuZFRvKCRib2R5KVxuXG4gICAgICAgIHRoaXMuJGNhbmNlbEJ0biA9ICQoJzxidXR0b24vPicsIHtcbiAgICAgICAgICAgIHR5cGU6ICdidXR0b24nLFxuICAgICAgICAgICAgY2xhc3M6ICdidG4nLFxuICAgICAgICAgICAgdGV4dDogQ3JhZnQudCgnZm9ybS1idWlsZGVyJywgJ0NhbmNlbCcpLFxuICAgICAgICB9KS5hcHBlbmRUbygkYnV0dG9ucylcblxuICAgICAgICB0aGlzLiRzYXZlQnRuID0gJCgnPGJ1dHRvbi8+Jywge1xuICAgICAgICAgICAgdHlwZTogJ3N1Ym1pdCcsXG4gICAgICAgICAgICBjbGFzczogJ2J0biBzdWJtaXQnLFxuICAgICAgICAgICAgdGV4dDogQ3JhZnQudCgnZm9ybS1idWlsZGVyJywgJ1NldCcpLFxuICAgICAgICB9KS5hcHBlbmRUbygkYnV0dG9ucylcblxuICAgICAgICB0aGlzLiRjbGFzc0lucHV0ID0gJGZpZWxkcy5maW5kKCcuaW5wdXQtY2xhc3MnKVxuICAgICAgICB0aGlzLiRpZElucHV0ID0gJGZpZWxkcy5maW5kKCcuaW5wdXQtaWQnKVxuICAgICAgICB0aGlzLiR0ZW1wbGF0ZUlucHV0ID0gJGZpZWxkcy5maW5kKCcuaW5wdXQtdGVtcGxhdGUnKVxuXG4gICAgICAgIHRoaXMubG9hZE1vZGFsVmFsdWVzKClcblxuICAgICAgICB0aGlzLmFkZExpc3RlbmVyKHRoaXMuJGNhbmNlbEJ0biwgJ2NsaWNrJywgJ2hpZGUnKVxuICAgICAgICB0aGlzLmFkZExpc3RlbmVyKHRoaXMuJGZvcm0sICdzdWJtaXQnLCAnb25Gb3JtU3VibWl0JylcbiAgICB9LFxuXG4gICAgbG9hZE1vZGFsVmFsdWVzKCkge1xuICAgICAgICBsZXQgJGNsYXNzSW5wdXQgPSAkKCdpbnB1dFtuYW1lPVwiZm9ybS1idWlsZGVyW2ZpZWxkXVsnICsgdGhpcy5maWVsZElkICsgJ11bb3B0aW9uc11bY2xhc3NdXCJdJykudmFsKClcbiAgICAgICAgbGV0ICRpZElucHV0ID0gJCgnaW5wdXRbbmFtZT1cImZvcm0tYnVpbGRlcltmaWVsZF1bJyArIHRoaXMuZmllbGRJZCArICddW29wdGlvbnNdW2lkXVwiXScpLnZhbCgpXG4gICAgICAgIGxldCAkdGVtcGxhdGVJbnB1dCA9ICQoJ2lucHV0W25hbWU9XCJmb3JtLWJ1aWxkZXJbZmllbGRdWycgKyB0aGlzLmZpZWxkSWQgKyAnXVtvcHRpb25zXVt0ZW1wbGF0ZV1cIl0nKS52YWwoKVxuXG4gICAgICAgIGlmICgkY2xhc3NJbnB1dCkge1xuICAgICAgICAgICAgdGhpcy4kZm9ybS5maW5kKCcuaW5wdXQtY2xhc3MnKS52YWwoJGNsYXNzSW5wdXQpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJGlkSW5wdXQpIHtcbiAgICAgICAgICAgIHRoaXMuJGZvcm0uZmluZCgnLmlucHV0LWlkJykudmFsKCRpZElucHV0KVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCR0ZW1wbGF0ZUlucHV0KSB7XG4gICAgICAgICAgICB0aGlzLiRmb3JtLmZpbmQoJy5pbnB1dC10ZW1wbGF0ZScpLnZhbCgkdGVtcGxhdGVJbnB1dClcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBvbkZvcm1TdWJtaXQoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcblxuICAgICAgICBpZiAoIXRoaXMudmlzaWJsZSkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmZpZWxkLnRyaWdnZXIoJ3NldE9wdGlvbnMnLCB7XG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgXCJjbGFzc1wiOiB0aGlzLiRjbGFzc0lucHV0LnZhbCgpLFxuICAgICAgICAgICAgICAgIGlkOiB0aGlzLiRpZElucHV0LnZhbCgpLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiB0aGlzLiR0ZW1wbGF0ZUlucHV0LnZhbCgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgdGhpcy5oaWRlKClcbiAgICB9LFxuXG4gICAgb25GYWRlT3V0KCkge1xuICAgICAgICB0aGlzLmJhc2UoKVxuICAgICAgICB0aGlzLmRlc3Ryb3koKVxuICAgIH0sXG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLmJhc2UoKVxuICAgICAgICB0aGlzLiRjb250YWluZXIucmVtb3ZlKClcbiAgICAgICAgdGhpcy4kc2hhZGUucmVtb3ZlKClcbiAgICB9LFxuXG4gICAgc2hvdyhvcHRpb25zKSB7XG4gICAgICAgIGxldCBzZWxmID0gdGhpc1xuXG4gICAgICAgIGlmIChvcHRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxldCB2YWx1ZXMgPSBKU09OLnBhcnNlKG9wdGlvbnNbdGhpcy5maWVsZElkXSlcblxuICAgICAgICAgICAgJC5lYWNoKHZhbHVlcywgKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSAnY2xhc3MnICYmIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuJGNsYXNzSW5wdXQudmFsKHZhbHVlKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChrZXkgPT09ICdpZCcgJiYgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi4kaWRJbnB1dC52YWwodmFsdWUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgaWYgKCFHYXJuaXNoLmlzTW9iaWxlQnJvd3NlcigpKSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgkLnByb3h5KChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGNsYXNzSW5wdXQuZm9jdXMoKVxuICAgICAgICAgICAgICAgIH0pKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYmFzZSgpXG4gICAgfVxufSlcblxuXG4vLyAgICAgICAgIGlmIChDcmFmdC5GaWVsZExheW91dERlc2lnbmVyKSB7XG4vLyAgICAgICAgICAgICBGTEQgPSBDcmFmdC5GaWVsZExheW91dERlc2lnbmVyXG4vLyAgICAgICAgICAgICBGTERfaW5pdCA9IEZMRC5wcm90b3R5cGUuaW5pdFxuLy8gICAgICAgICAgICAgRkxEX2ZpZWxkID0gRkxELnByb3RvdHlwZS5pbml0RmllbGRcbi8vICAgICAgICAgICAgIEZMRF9maWVsZE9wdGlvbnMgPSBGTEQucHJvdG90eXBlLm9uRmllbGRPcHRpb25TZWxlY3Rcbi8vXG4vLyAgICAgICAgICAgICBGTEQucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbigpIHtcbi8vICAgICAgICAgICAgICAgICBGTERfaW5pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4vLyAgICAgICAgICAgICAgICAgdGhpcy5maWVsZEVkaXRvciA9IG5ldyBGaWVsZEVkaXRvcih0aGlzKVxuLy8gICAgICAgICAgICAgfVxuLy9cbi8vICAgICAgICAgICAgIEZMRC5wcm90b3R5cGUuaW5pdEZpZWxkID0gZnVuY3Rpb24oJGZpZWxkKSB7XG4vLyAgICAgICAgICAgICAgICAgbGV0ICRwcmV2aWV3XG4vLyAgICAgICAgICAgICAgICAgbGV0ICRlZGl0QnRuXG4vLyAgICAgICAgICAgICAgICAgbGV0ICRodG1sXG4vLyAgICAgICAgICAgICAgICAgbGV0ICRtZW51XG4vLyAgICAgICAgICAgICAgICAgbGV0ICR1bFxuLy8gICAgICAgICAgICAgICAgIGxldCBtZW51XG4vLyAgICAgICAgICAgICAgICAgbGV0IG1lbnVCdG5cbi8vXG4vLyAgICAgICAgICAgICAgICAgRkxEX2ZpZWxkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbi8vXG4vLyAgICAgICAgICAgICAgICAgJGVkaXRCdG4gPSAkZmllbGQuZmluZCgnLnNldHRpbmdzJylcbi8vICAgICAgICAgICAgICAgICBtZW51QnRuID0gJGVkaXRCdG4uZGF0YSgnbWVudWJ0bicpXG4vLyAgICAgICAgICAgICAgICAgbWVudSA9IG1lbnVCdG4ubWVudVxuLy8gICAgICAgICAgICAgICAgICRtZW51ID0gbWVudS4kY29udGFpbmVyXG4vLyAgICAgICAgICAgICAgICAgJHVsID0gJG1lbnUuY2hpbGRyZW4oJ3VsJylcbi8vICAgICAgICAgICAgICAgICAkaHRtbCA9ICQoJzxsaT48YSBkYXRhLWFjdGlvbj1cImZpZWxkb3B0aW9uc1wiPicgKyBDcmFmdC50KCdmb3JtLWJ1aWxkZXInLCAnT3B0aW9ucycpICsgJzwvYT48L2xpPicpLmFwcGVuZFRvKCR1bClcbi8vXG4vLyAgICAgICAgICAgICAgICAgJHByZXZpZXcgPSAkKFtcbi8vICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJmaWVsZC1vcHRpb25zLXByZXZpZXdcIj4nLFxuLy8gICAgICAgICAgICAgICAgICAgICAnPC9kaXY+J1xuLy8gICAgICAgICAgICAgICAgIF0uam9pbignJykpLmFwcGVuZFRvKCRmaWVsZClcbi8vXG4vLyAgICAgICAgICAgICAgICAgcmV0dXJuIG1lbnUuYWRkT3B0aW9ucygkaHRtbC5jaGlsZHJlbignYScpKVxuLy8gICAgICAgICAgICAgfVxuLy9cbi8vICAgICAgICAgICAgIEZMRC5wcm90b3R5cGUub25GaWVsZE9wdGlvblNlbGVjdCA9IGZ1bmN0aW9uKG9wdGlvbikge1xuLy8gICAgICAgICAgICAgICAgIGxldCAkZmllbGRcbi8vICAgICAgICAgICAgICAgICBsZXQgJG9wdGlvblxuLy8gICAgICAgICAgICAgICAgIGxldCBhY3Rpb25cbi8vXG4vLyAgICAgICAgICAgICAgICAgRkxEX2ZpZWxkT3B0aW9ucy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4vL1xuLy8gICAgICAgICAgICAgICAgICRvcHRpb24gPSAkKG9wdGlvbilcbi8vICAgICAgICAgICAgICAgICAkZmllbGQgPSAkb3B0aW9uLmRhdGEoJ21lbnUnKS4kYW5jaG9yLnBhcmVudCgpXG4vLyAgICAgICAgICAgICAgICAgYWN0aW9uID0gJG9wdGlvbi5kYXRhKCdhY3Rpb24nKVxuLy9cbi8vICAgICAgICAgICAgICAgICBzd2l0Y2ggKGFjdGlvbikge1xuLy8gICAgICAgICAgICAgICAgICAgICBjYXNlICdmaWVsZG9wdGlvbnMnOlxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCdmaWVsZE9wdGlvbnNTZWxlY3RlZCcsIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICRvcHRpb25bMF0sXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRhcmdldDogJG9wdGlvbixcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZmllbGQ6ICRmaWVsZCxcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGQ6IHRoaXMsXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICRmaWVsZC5kYXRhKCdpZCcpIHwgMFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgfSlcbi8vICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgIH1cbi8vICAgICB9LFxuLy9cbi8vICAgICBnZXRPcHRpb25zKGxheW91dElkKSB7XG4vLyAgICAgICAgIGxldCBvcHRpb25zXG4vLyAgICAgICAgIG9wdGlvbnMgPSB7fVxuLy9cbi8vICAgICAgICAgJC5lYWNoKHRoaXMub3B0aW9ucywgKGtleSwgaXRlbSkgPT4ge1xuLy8gICAgICAgICAgICAgaWYgKHBhcnNlSW50KGl0ZW0uZmllbGRMYXlvdXRJZCkgPT0gbGF5b3V0SWQpIHtcbi8vICAgICAgICAgICAgICAgICBvcHRpb25zW2l0ZW0uZmllbGRJZF0gPSBpdGVtLm9wdGlvbnNcbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgfSlcbi8vXG4vLyAgICAgICAgIHJldHVybiBvcHRpb25zXG4vLyAgICAgfVxuLy8gfSkpXG5cbiJdLCJmaWxlIjoiLi9kZXZlbG9wbWVudC9qcy9maWVsZC1sYXlvdXQtZGVzaWduZXIuanMuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./development/js/field-layout-designer.js\n");
/******/ })()
;