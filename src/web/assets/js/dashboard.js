/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!*************************************!*\
  !*** ./development/js/dashboard.js ***!
  \*************************************/
eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar DashboardReportChart;\nDashboardReportChart = Garnish.Base.extend({\n  $container: null,\n  $chartExplorer: null,\n  $totalValue: null,\n  $chartContainer: null,\n  $spinner: null,\n  $error: null,\n  $chart: null,\n  params: {\n    startDate: null,\n    endDate: null\n  },\n  init: function init(widgetId, settings) {\n    this.setSettings(settings);\n    this.$widget = $('#widget-' + widgetId);\n    this.$body = this.$widget.find('.body:first');\n    this.$chartContainer = $('<div class=\"chart hidden\"></div>').appendTo(this.$body);\n    this.$error = $('<div class=\"error\"/>').appendTo(this.$body); // let dateRange = this.settings.dateRange;\n\n    var dateRange = 'd30';\n\n    switch (dateRange) {\n      case 'd7':\n        this.startDate = DashboardReportChart.getDateByDays(6);\n        this.endDate = new Date();\n        break;\n\n      case 'd30':\n        this.startDate = DashboardReportChart.getDateByDays(30);\n        this.endDate = new Date();\n        break;\n\n      case 'lastweek':\n        this.startDate = DashboardReportChart.getDateByDays(13);\n        this.endDate = DashboardReportChart.getDateByDays(7);\n        break;\n\n      case 'lastmonth':\n        this.startDate = DashboardReportChart.getDateByDays(60);\n        this.endDate = DashboardReportChart.getDateByDays(30);\n        break;\n    } // Request report\n\n\n    var requestData = {\n      startDate: DashboardReportChart.getDateValue(this.startDate),\n      endDate: DashboardReportChart.getDateValue(this.endDate)\n    };\n    this.loadReport(requestData); // this.$container = $(widgetId)\n    // this.createChartExplorer()\n    // this.handleMonthChange()\n  },\n  getStorage: function getStorage(key) {\n    return DashboardReportChart.getStorage(this._namespace, key);\n  },\n  setStorage: function setStorage(key, value) {\n    DashboardReportChart.setStorage(this._namespace, key, value);\n  },\n  createChartExplorer: function createChartExplorer() {\n    var $chartExplorer = $('<div class=\"chart-explorer\"></div>').appendTo(this.$container);\n    var $chartHeader = $('<div class=\"chart-header\"></div>').appendTo($chartExplorer);\n    var $timelinePickerWrapper = $('<div class=\"timeline-wrapper\" />').appendTo($chartHeader);\n    var $total = $('<div class=\"total\"></div>').prependTo($chartHeader);\n    var $totalLabel = $('<div class=\"total-label\"><p>' + Craft.t('form-builder', 'Total Submissions') + '</p></div>').appendTo($total);\n    var $totalValueWrapper = $('<div class=\"total-value-wrapper\"></div>').prependTo($total);\n    var $totalValue = $('<span class=\"total-value\">&nbsp;</span>').appendTo($totalValueWrapper);\n    this.$chartExplorer = $chartExplorer;\n    this.$totalValue = $totalValue;\n    this.$chartContainer = $('<div class=\"chart-container\"></div>').appendTo($chartExplorer);\n    this.$spinner = $('<div class=\"loader\"><svg width=\"20px\" height=\"20px\" viewBox=\"0 0 42 42\" xmlns=\"http://www.w3.org/2000/svg\" stroke=\"#E9EFF4\"><g fill=\"none\" fill-rule=\"evenodd\"><g transform=\"translate(4 3)\" stroke-width=\"5\"><circle stroke-opacity=\".5\" cx=\"18\" cy=\"18\" r=\"18\"/><path d=\"M36 18c0-9.94-8.06-18-18-18\"><animateTransform attributeName=\"transform\" type=\"rotate\" from=\"0 18 18\" to=\"360 18 18\" dur=\"1s\" repeatCount=\"indefinite\"/></path></g></g></svg></div>').prependTo($chartHeader);\n    this.$error = $('<div class=\"error\"></div>').appendTo(this.$chartContainer);\n    this.$chart = $('<div class=\"chart\"></div>').appendTo(this.$chartContainer);\n    this.$monthBtn = $('<button id=\"month-range\" class=\"active\">Last 30 days</buttons>').appendTo($timelinePickerWrapper);\n    this.$weekBtn = $('<button id=\"week-range\">Week</buttons>').appendTo($timelinePickerWrapper);\n    this.addListener(this.$monthBtn, 'click', 'handleMonthChange');\n    this.addListener(this.$weekBtn, 'click', 'handleWeekChange');\n  },\n  handleMonthChange: function handleMonthChange() {\n    this.$weekBtn.removeClass('active');\n    this.$monthBtn.addClass('active');\n    var startTime = this.monthRangeDate();\n    var endTime = new Date(new Date().getTime());\n    this.params.startDate = startTime;\n    this.params.endDate = endTime;\n    this.setStorage('startTime', startTime);\n    this.setStorage('endTime', endTime);\n    this.loadReport();\n  },\n  handleWeekChange: function handleWeekChange() {\n    this.$monthBtn.removeClass('active');\n    this.$weekBtn.addClass('active');\n    var startTime = this.weekRangeDate();\n    var endTime = new Date(new Date().getTime());\n    this.params.startDate = startTime;\n    this.params.endDate = endTime;\n    this.setStorage('startTime', startTime);\n    this.setStorage('endTime', endTime);\n    this.loadReport();\n  },\n  monthRangeDate: function monthRangeDate() {\n    var today = new Date();\n    var priorDate = new Date(new Date().setDate(today.getDate() - 30));\n    return priorDate;\n  },\n  weekRangeDate: function weekRangeDate() {\n    var firstDay = new Date(new Date().getTime());\n    var previousweek = new Date(firstDay.getTime() - 7 * 24 * 60 * 60 * 1000);\n    return previousweek;\n  },\n  loadReport: function loadReport(data) {\n    var requestData = data;\n    requestData.elementType = 'roundhouse\\\\formbuilder\\\\elements\\\\Entry'; // this.$spinner.removeClass('hidden')\n    // this.$error.addClass('hidden')\n    // this.$chart.removeClass('error')\n\n    Craft.postActionRequest('form-builder/charts/get-entries-count', requestData, $.proxy(function (response, textStatus) {\n      if (textStatus === 'success' && typeof response.error === 'undefined') {\n        this.$chartContainer.removeClass('hidden'); // Create chart\n\n        this.chart = new Craft.charts.Area(this.$chartContainer, {\n          yAxis: {\n            formatter: function formatter(chart) {\n              return function (d) {\n                var format = ',.0f';\n\n                if (d !== Math.round(d)) {\n                  format = ',.1f';\n                }\n\n                return chart.formatLocale.format(format)(d);\n              };\n            }\n          }\n        });\n        var chartDataTable = new Craft.charts.DataTable(response.dataTable);\n        var chartSettings = {\n          orientation: response.orientation,\n          dataScale: response.scale,\n          formats: response.formats\n        };\n        this.chart.draw(chartDataTable, chartSettings);\n      } else {\n        // Error\n        var msg = Craft.t('A server error occurred.');\n\n        if (typeof response !== 'undefined' && response && typeof response.error !== 'undefined') {\n          msg = response.error;\n        }\n\n        this.$error.html(msg);\n        this.$error.removeClass('hidden');\n      } // this.$spinner.addClass('hidden');\n      // if(textStatus === 'success' && typeof(response.error) == 'undefined') {\n      //     if(!this.chart) {\n      //         this.chart = new Craft.charts.Area(this.$chart)\n      //     }\n      //\n      //     let chartDataTable = new Craft.charts.DataTable(response.dataTable)\n      //\n      //     let chartSettings = {\n      //         orientation: response.orientation,\n      //         formats: response.formats,\n      //         dataScale: response.scale,\n      //         margin: { top: 10, right: 10, bottom: 30, left: 10 }\n      //     }\n      //\n      //\n      //     this.chart.settings.formats = response.formats\n      //\n      //     this.chart.draw(chartDataTable, chartSettings)\n      //     this.$totalValue.html(response.totalHtml)\n      //\n      // } else {\n      //     let msg = Craft.t('An unknown error occurred.')\n      //\n      //     if (typeof(response) != 'undefined' && response && typeof(response.error) != 'undefined') {\n      //         msg = response.error\n      //     }\n      //\n      //     this.$error.html(msg)\n      //     this.$error.removeClass('hidden')\n      //     this.$chart.addClass('error')\n      // }\n\n    }, this));\n  },\n  getDateFromDatepickerInstance: function getDateFromDatepickerInstance(inst) {\n    return new Date(inst.currentYear, inst.currentMonth, inst.currentDay);\n  } // getDateValue(date) {\n  //     return date.getFullYear()+'-'+(date.getMonth()+1)+'-'+date.getDate()\n  // },\n\n}, {\n  getDateByDays: function getDateByDays(days) {\n    var date = new Date();\n    date = date.getTime() - 60 * 60 * 24 * days * 1000;\n    return new Date(date);\n  },\n  getDateValue: function getDateValue(date) {\n    return Math.floor(date.getTime() / 1000);\n  },\n  storage: {},\n  getStorage: function getStorage(namespace, key) {\n    if (DashboardReportChart.storage[namespace] && DashboardReportChart.storage[namespace][key]) {\n      return DashboardReportChart.storage[namespace][key];\n    }\n\n    return null;\n  },\n  setStorage: function setStorage(namespace, key, value) {\n    if (_typeof(DashboardReportChart.storage[namespace]) == ( true ? \"undefined\" : 0)) {\n      DashboardReportChart.storage[namespace] = {};\n    }\n\n    DashboardReportChart.storage[namespace][key] = value;\n  }\n});\nGarnish.$doc.ready(function () {\n  new DashboardReportChart('recent-submissions-chart-widget');\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./development/js/dashboard.js\n");
/******/ })()
;