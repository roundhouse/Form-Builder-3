/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./development/js/entries.js":
/*!***********************************!*\
  !*** ./development/js/entries.js ***!
  \***********************************/
/***/ (function() {

eval("var _this3 = this;\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar WriteNoteWidget;\nWriteNoteWidget = Garnish.Base.extend({\n  $widget: null,\n  $btn: null,\n  $list: null,\n  $noteTextarea: null,\n  $spinner: null,\n  modal: null,\n  note: null,\n  entryId: null,\n  init: function init(widget) {\n    this.$widget = $(widget);\n    this.$btn = this.$widget.find('#write-note-btn');\n    this.$list = this.$widget.find('.list');\n    this.$spinner = this.$widget.find('.loader');\n    this.entryId = this.$widget.data('entry-id');\n    this.addListener(this.$btn, 'click', 'openNoteModel');\n  },\n  openNoteModel: function openNoteModel(e) {\n    e.preventDefault();\n\n    if (this.modal) {\n      delete this.modal;\n      this.modal = new NoteModal(this);\n    } else {\n      this.modal = new NoteModal(this);\n    }\n\n    this.modal.on('save', $.proxy(this, 'updateNotes'));\n  },\n  updateNotes: function updateNotes(data) {\n    var _this = this;\n\n    this.$spinner.removeClass('hidden');\n    data = {\n      note: this.note,\n      entryId: this.entryId\n    };\n    Craft.postActionRequest('form-builder/notes/save', data, $.proxy(function (response, textStatus) {\n      if (textStatus === 'success') {\n        Craft.cp.displayNotice(Craft.t('form-builder', 'Note added'));\n\n        _this.$spinner.addClass('hidden');\n\n        _this.updateNotesHtml(response.note);\n      }\n    }, this));\n    this.modal.hide();\n  },\n  updateNotesHtml: function updateNotesHtml(data) {\n    var author;\n    var note;\n    note = data.note;\n    author = data.author.fullName;\n    $markup = $('<div class=\"list-item pad\">' + '<div class=\"item-meta\">' + '<span class=\"item-meta-icon\"><i class=\"far fa-user\"></i></span>' + '<span class=\"item-meta-title\">' + author + '</span>' + '<span class=\"item-meta-right\">' + Craft.t('form-builder', 'Now') + '</span>' + '</div>' + '<div class=\"item-title\">' + note + '</div>' + '</div>');\n    this.$list.prepend($markup);\n    $('.no-items').remove();\n  }\n});\nNoteModal = Garnish.Modal.extend({\n  widget: null,\n  init: function init(widget) {\n    var body, self;\n    self = this;\n    this.base();\n    this.widget = widget;\n    this.$form = $('<form class=\"modal fitted\">').appendTo(Garnish.$bod);\n    this.setContainer(this.$form);\n    this.$body = $('<div class=\"body\"/>').appendTo(this.$form); // body = $([\n    //     '<header class=\"header\">',\n    //         '<h1>' + Craft.t('form-builder', 'Note') + '</h1>',\n    //         '<div class=\"instructions\">' + Craft.t('form-builder', 'Leave a note for this entry') + '</div>',\n    //     '</header>',\n    //     '<div class=\"body\">',\n    //         '<div class=\"fb-field\">',\n    //             '<div class=\"input-hint\">TEXT</div>',\n    //             '<div class=\"input\"><textarea id=\"note-text\" rows=\"6\"></textarea></div>',\n    //         '</div>',\n    //     '</div>',\n    //     '<footer class=\"footer\">',\n    //         '<div class=\"buttons right\">',\n    //             '<input type=\"button\" class=\"btn cancel\" value=\"' + Craft.t('form-builder', 'Cancel') + '\">',\n    //             '<input type=\"submit\" class=\"btn submit\" value=\"' + Craft.t('form-builder', 'Add') + '\">',\n    //         '</div>',\n    //     '</footer>'].join('')).appendTo(this.$form)\n\n    var $noteTextElement = Craft.ui.createTextareaField({\n      label: Craft.t('form-builder', 'Text'),\n      id: 'note-text',\n      \"class\": 'note-text'\n    }).appendTo(this.$body);\n    this.$noteTextarea = $noteTextElement.find('.note-text');\n    this.$footer = $('<footer class=footer\"></footer>').appendTo(this.$body);\n    this.$buttons = $('<div class=\"buttons right\" style=\"margin-top: 0;\"/>').appendTo(this.$footer);\n    this.$cancelBtn = $('<button/>', {\n      type: 'button',\n      \"class\": 'btn',\n      text: Craft.t('app', 'Cancel')\n    }).appendTo(this.$buttons);\n    this.$saveBtn = $('<button/>', {\n      type: 'submit',\n      \"class\": 'btn submit',\n      text: Craft.t('app', 'Save')\n    }).appendTo(this.$buttons);\n    this.show();\n    this.addListener(this.$cancelBtn, 'click', 'hide');\n    this.addListener(this.$form, 'submit', 'save');\n  },\n  save: function save(e) {\n    e.preventDefault();\n    this.note = this.$noteTextarea.val();\n    this.widget.note = this.note;\n\n    if (this.note === '') {\n      Garnish.shake(this.$container);\n    } else {\n      this.trigger('save', {\n        note: this.note\n      });\n    }\n  }\n});\nAssetManagement = Garnish.Base.extend({\n  $container: null,\n  $elements: null,\n  $form: null,\n  $trigger: null,\n  downloadCount: null,\n  init: function init(container) {\n    var _this2 = this;\n\n    this.$container = $(container);\n    this.$elements = this.$container.find('.item-asset');\n    this.$form = this.$container.find('#download-all-assets');\n    this.$trigger = this.$form.find('button');\n    this.downloadCount = this.$form.find('.asset-count');\n    this.$status = $('.download-status', this.$form);\n    this.$elements.each(function (i, el) {\n      element = new AssetFile(el, _this2);\n    });\n    this.addListener(this.$form, 'submit', 'onSubmit');\n  },\n  updateDownloadBtn: function updateDownloadBtn() {\n    items = Object.keys(AssetManagement.storage).length;\n\n    if (items > 0) {\n      this.downloadCount.html(items);\n      this.$trigger.removeClass('hidden');\n    } else {\n      this.$trigger.addClass('hidden');\n      this.downloadCount.html('0');\n    }\n  },\n  onSubmit: function onSubmit(e) {\n    e.preventDefault();\n\n    if (!this.$trigger.hasClass('disabled')) {\n      if (!this.progressBar) {\n        this.progressBar = new Craft.ProgressBar(this.$status);\n      } else {\n        this.progressBar.resetProgressBar();\n      }\n\n      this.progressBar.$progressBar.removeClass('hidden');\n      this.progressBar.$progressBar.velocity('stop').velocity({\n        opacity: 1\n      }, {\n        complete: $.proxy(function () {\n          var postData = Garnish.getPostData(this.$form);\n          var params = Craft.expandPostArray(postData);\n          params.assets = items = AssetManagement.storage;\n          var data = {\n            params: params\n          };\n          Craft.postActionRequest(params.action, data, $.proxy(function (response, textStatus) {\n            if (textStatus === 'success') {\n              if (response && response.error) {\n                alert(response.error);\n              }\n\n              this.updateProgressBar();\n\n              if (response && response.downloadFile) {\n                var $iframe = $('<iframe/>', {\n                  'src': Craft.getActionUrl('form-builder/assets/download-file', {\n                    'filename': response.downloadFile\n                  })\n                }).hide();\n                this.$form.append($iframe);\n              }\n\n              setTimeout($.proxy(this, 'onComplete'), 300);\n            } else {\n              Craft.cp.displayError(Craft.t('form-builder', 'There was a problem downloading assets. Please check the Craft logs.'));\n              this.onComplete(false);\n            }\n          }, this), {\n            complete: $.noop\n          });\n        }, this)\n      });\n\n      if (this.$allDone) {\n        this.$allDone.css('opacity', 0);\n      }\n\n      this.$trigger.addClass('disabled');\n      this.$trigger.trigger('blur');\n    }\n  },\n  updateProgressBar: function updateProgressBar() {\n    var width = 100;\n    this.progressBar.setProgressPercentage(width);\n  },\n  onComplete: function onComplete(showAllDone) {\n    this.progressBar.$progressBar.velocity({\n      opacity: 0\n    }, {\n      duration: 'fast',\n      complete: $.proxy(function () {\n        this.$trigger.removeClass('disabled');\n        this.$trigger.trigger('focus');\n      }, this)\n    });\n  }\n}, {\n  storage: {},\n  setStorage: function setStorage(namespace, key, value) {\n    var remove = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n    if (_typeof(AssetManagement.storage[namespace]) == ( true ? \"undefined\" : 0)) {\n      AssetManagement.storage[namespace] = {};\n    }\n\n    if (remove) {\n      delete AssetManagement.storage[namespace];\n    } else {\n      AssetManagement.storage[namespace][key] = value;\n    }\n  },\n  getStorage: function getStorage(namespace, key) {\n    if (AssetManagement.storage[namespace] && AssetManagement.storage[namespace][key]) {\n      return AssetManagement.storage[namespace][key];\n    }\n\n    return null;\n  }\n});\nAssetFile = Garnish.Base.extend({\n  element: null,\n  $selectBtn: null,\n  parent: null,\n  id: null,\n  init: function init(element, parent) {\n    this.parent = parent;\n    this.element = $(element);\n    this.$selectBtn = this.element.find('.asset-select');\n    this.id = this.$selectBtn.data('asset-id');\n    this.addListener(this.$selectBtn, 'click', 'toggleSelection');\n  },\n  toggleSelection: function toggleSelection() {\n    if (this.$selectBtn.hasClass('active')) {\n      this.$selectBtn.removeClass('active');\n      this.element.removeClass('selected');\n      AssetManagement.setStorage(this.id, 'asset', this.id, true);\n    } else {\n      this.element.addClass('selected');\n      this.$selectBtn.addClass('active');\n      AssetManagement.setStorage(this.id, 'asset', this.id);\n    }\n\n    this.parent.updateDownloadBtn();\n  }\n});\nGarnish.$doc.ready(function () {\n  new WriteNoteWidget('.notes-widget');\n  new AssetManagement('#main');\n\n  if (Craft.elementIndex) {\n    Craft.elementIndex.on('updateElements', function (e) {\n      var elementsCount;\n      var selectedSource;\n      var unreadItems;\n      Craft.postActionRequest('form-builder/entries/get-unread-entries', $.proxy(function (response, textStatus) {\n        if (response.success) {\n          window.FormBuilder.unreadCount = response.count;\n\n          if (response.count > 0) {\n            return $('.total-entry-count').html(response.count);\n          } else {\n            return $('.total-entry-count').html('');\n          }\n        }\n      }, this));\n      selectedSource = e.target.instanceState.selectedSource;\n\n      if (e.target.view._totalVisible === 0) {\n        e.target.view.$elementContainer.html($(\"<tr><td colspan=\\\"6\\\">\".concat(Craft.t(\"form-builder\", \"No entries available\"), \"</td></tr>\")));\n      } // Update unread count utility nav\n\n\n      Craft.postActionRequest('form-builder/entries/get-unread-entries', $.proxy(function (response, textStatus) {\n        if (textStatus === 'success') {\n          $('#sources .entry-count').html('');\n          $.each(response.grouped, function (key, entries) {\n            $('[data-key=\"form:' + key + '\"]').find('.entry-count').html(entries.length);\n          });\n\n          if (response.totalCount > 0) {\n            $('.fb-unread-container .fb-badge').addClass('show');\n            $('.fb-unread-container .fb-badge .count').html(response.totalCount);\n            $('#unread-notifications').find('.body').html(response.template);\n          } else {\n            $('.fb-unread-container .fb-badge').removeClass('show');\n            $('.fb-unread-container .fb-badge .count').html('');\n            $('#unread-notifications').find('.body').html('<p class=\"no-content\">' + Craft.t('form-builder', 'No unread submissions.') + '</p>');\n          }\n        }\n      }, this));\n    });\n  } // TODO: delete entry and all assets and notes\n\n\n  $('#delete-entry').on('click', function (e) {\n    var entryId = $(e.currentTarget).data('entry-id');\n    var data = {\n      entryId: entryId\n    };\n\n    if (confirm(Craft.t(\"form-builder\", \"Deleting entry will remove all relevant assets and notes, are you sure?\"))) {\n      Craft.postActionRequest('form-builder/entries/delete', data, $.proxy(function (response, textStatus) {\n        if (textStatus === 'success') {\n          Craft.cp.displayNotice(Craft.t('form-builder', 'Deleting entry...'));\n          setTimeout(function () {\n            window.location.href = \"\".concat(Craft.getCpUrl(), \"/form-builder/entries\");\n          }, 2000);\n        }\n      }, _this3));\n    }\n  });\n  $('.submission-action-trigger').on('click', function (e) {\n    e.preventDefault();\n    var $menu;\n    var entryId;\n    var fileIds;\n    var formId;\n    var type;\n    type = $(this).data('type');\n    formId = $(this).data('form-id');\n    entryId = $(this).data('entry-id');\n    fileIds = $(this).data('file-ids');\n    $menu = $('<div class=\"tout-dropdown\"/>').html('<ul class=\"form-item-menu\">' + '</ul>');\n\n    if (type === 'submission') {\n      $('<li><a href=\"#\" class=\"delete-submission\">Delete Submission</a></li>').appendTo($menu.find('ul'));\n    } else if (type === 'form') {\n      $(\"<li><a href=\\\"\".concat(window.FormBuilder.adminUrl, \"/forms/\").concat(formId, \"\\\">View Form</a></li>\")).appendTo($menu.find('ul'));\n    } else if (type === 'uploads') {\n      $(\"<li><a href=\\\"\".concat(window.FormBuilder.adminUrl, \"/entries\\\" class=\\\"delete-all-files\\\">Delete All</a></li>\")).appendTo($menu.find('ul'));\n      $(\"<li><a href=\\\"\".concat(window.FormBuilder.adminUrl, \"/entries\\\" class=\\\"download-all-files\\\">Download All</a></li>\")).appendTo($menu.find('ul'));\n    }\n\n    new Garnish.HUD($(this), $menu, {\n      hudClass: 'hud fb-hud submissionhud',\n      closeOtherHUDs: false\n    });\n    $menu.find('.delete-submission').on('click', function (e) {\n      e.preventDefault();\n      var data;\n      data = {\n        id: entryId\n      };\n\n      if (confirm(Craft.t(\"form-builder\", \"Are you sure you want to delete this entry?\"))) {\n        Craft.postActionRequest('form-builder/entries/delete', data, $.proxy(function (response, textStatus) {\n          if (textStatus === 'success') {\n            Craft.cp.displayNotice(Craft.t('form-builder', 'Entry deleted'));\n            window.location.href = \"\".concat(window.FormBuilder.adminUrl, \"/entries\");\n          }\n        }, this));\n      }\n    });\n    $menu.find('.delete-all-files').on('click', function (e) {\n      var data;\n      e.preventDefault();\n      data = {\n        fileId: fileIds\n      };\n\n      if (confirm(Craft.t(\"form-builder\", \"Are you sure you want to delete all files?\"))) {\n        Craft.postActionRequest('assets/deleteFile', data, $.proxy(function (response, textStatus) {\n          var hudID;\n\n          if (response.success) {\n            for (hudID in Garnish.HUD.activeHUDs) {\n              Garnish.HUD.activeHUDs[hudID].hide();\n            }\n\n            $('.upload-details').parent().velocity('fadeOut', {\n              duration: '100'\n            });\n            return setTimeout(function () {\n              return $('.upload-details').parent().remove();\n            }, 100);\n          }\n        }, this));\n      }\n    });\n    $menu.find('.download-all-files').on('click', function (e) {\n      e.preventDefault();\n      var data;\n      Craft.cp.displayNotice(Craft.t('form-builder', 'Downloading...'));\n      data = {\n        ids: fileIds,\n        formId: formId\n      };\n      Craft.postActionRequest('form-builder/entries/downloadAllFiles', data, $.proxy(function (response, textStatus) {\n        var hudID;\n        var results;\n\n        if (response.success) {\n          window.location = \"/actions/form-builder/entries/downloadFiles?filePath=\".concat(response.filePath);\n          Craft.cp.displayNotice(Craft.t('form-builder', 'Download Successful'));\n        } else {\n          Craft.cp.displayError(Craft.t('form-builder', response.message));\n        }\n\n        results = [];\n\n        for (hudID in Garnish.HUD.activeHUDs) {\n          results.push(Garnish.HUD.activeHUDs[hudID].hide());\n        }\n\n        return results;\n      }, this));\n    });\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./development/js/entries.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	__webpack_modules__["./development/js/entries.js"]();
/******/ })()
;