/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./development/js/groups.js":
/*!**********************************!*\
  !*** ./development/js/groups.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var GroupItem;\nvar GroupModal;\nvar Groups;\nGroups = Garnish.Base.extend({\n  $groups: null,\n  $selectedGroup: null,\n  $newGroupBtn: null,\n  modal: null,\n  init: function init() {\n    var $groupSettingsBtn;\n    var menuBtn;\n    this.$groups = $('#groups');\n    this.$selectedGroup = this.$groups.find('a.sel:first');\n    this.$newGroupBtn = $('#newgroupbtn');\n    this.addListener(this.$newGroupBtn, 'click', 'addNewGroup');\n    $groupSettingsBtn = $('#groupsettingsbtn');\n\n    if ($groupSettingsBtn.length) {\n      menuBtn = $groupSettingsBtn.data('menubtn');\n      menuBtn.settings.onOptionSelect = $.proxy(function (elem) {\n        var action;\n        action = $(elem).data('action');\n\n        switch (action) {\n          case 'rename':\n            this.renameSelectedGroup();\n\n          case 'delete':\n            this.deleteSelectedGroup();\n        }\n      }, this);\n    }\n  },\n  addNewGroup: function addNewGroup() {\n    if (!this.modal) {\n      this.modal = new FormBuilder.GroupModal(this);\n    } else {\n      this.modal.show();\n    }\n  },\n  renameSelectedGroup: function renameSelectedGroup() {\n    var data;\n    var newName;\n    var oldName;\n    oldName = this.$selectedGroup.text();\n    newName = this.promptForGroupName(oldName);\n\n    if (newName && newName !== oldName) {\n      data = {\n        id: this.$selectedGroup.data('id'),\n        name: newName\n      };\n      Craft.postActionRequest('form-builder/groups/save', data, $.proxy(function (response, textStatus) {\n        var errors;\n\n        if (textStatus === 'success') {\n          if (response.success) {\n            this.$selectedGroup.text(response.group.name);\n            Craft.cp.displayNotice(Craft.t('form-builder', 'Group renamed.'));\n          } else if (response.errors) {\n            errors = this.flattenErrors(response.errors);\n            alert(\"\".concat(Craft.t('form-builder', 'Could not rename the group:'), \"\\n\\n\").concat(errors.join('\\n')));\n          } else {\n            Craft.cp.displayError();\n          }\n        }\n      }, this));\n    }\n  },\n  promptForGroupName: function promptForGroupName(oldName) {\n    prompt(Craft.t('form-builder', 'What do you want to name your group?'), oldName);\n  },\n  deleteSelectedGroup: function deleteSelectedGroup() {\n    var data;\n    this.$selectedGroup = $('#groups a.sel');\n\n    if (this.$selectedGroup.data('id') === 1) {\n      Craft.cp.displayError(Craft.t('form-builder', 'Cannot delete Default group'));\n    } else {\n      if (confirm(Craft.t('form-builder', 'Are you sure you want to delete this group and all its forms?'))) {\n        data = {\n          id: this.$selectedGroup.data('id')\n        };\n        Craft.postActionRequest('form-builder/groups/delete', data, $.proxy(function (response, textStatus) {\n          if (textStatus === 'success') {\n            if (response.success) {\n              location.href = Craft.getUrl('form-builder/forms');\n            } else {\n              Craft.cp.displayError();\n            }\n          }\n        }, this));\n      }\n    }\n  },\n  flattenErrors: function flattenErrors(responseErrors) {\n    var attribute;\n    var errors;\n    errors = [];\n\n    for (attribute in responseErrors) {\n      errors = errors.concat(responseErrors[attribute]);\n    }\n\n    return errors;\n  }\n});\nGroupItem = Garnish.Modal.extend({\n  $groupListItem: null,\n  $group: null,\n  $editGroupBtn: null,\n  id: null,\n  label: null,\n  iconName: null,\n  modal: null,\n  init: function init(el) {\n    this.$groupListItem = $(el);\n    this.$group = this.$groupListItem.find('a');\n    this.$editGroupBtn = this.$group.find('.edit-group');\n    this.id = this.$group.data('id');\n    this.label = this.$group.data('label');\n    this.iconName = this.$group.data('icon-name');\n    this.addListener(this.$editGroupBtn, 'click', 'edit');\n  },\n  edit: function edit() {\n    if (!this.modal) {\n      this.modal = new FormBuilder.GroupModal(this);\n    } else {\n      this.modal.show();\n    }\n  }\n});\nFormBuilder.GroupModal = Garnish.Modal.extend({\n  $heading: null,\n  $nameInput: null,\n  $iconInput: null,\n  $saveBtn: null,\n  $cancelBtn: null,\n  $spinner: null,\n  group: null,\n  loading: false,\n  init: function init(group) {\n    this.group = group;\n    var containerHtml = '<form class=\"modal fitted route-settings\" accept-charset=\"UTF-8\">' + '<div class=\"header\">' + '<h1></h1>' + '</div>' + // .header\n    '<div class=\"body\">' + '<div class=\"field\">' + '<div class=\"heading\">' + '<label for=\"group-name\">' + Craft.t('form-builder', 'Name') + ':</label>' + '</div>' + '<div class=\"input\">' + '<input id=\"group-name\" type=\"text\" class=\"text fullwidth ltr group-input\">' + '</div>' + // .input\n    '</div>' + '<div class=\"field\">' + '<div class=\"heading\">' + '<label for=\"group-name\">' + Craft.t('form-builder', 'Icon') + ':</label>' + '</div>' + '<div class=\"input\">' + '<input id=\"group-name\" type=\"text\" class=\"text fullwidth ltr icon-input\">' + '</div>' + // .input\n    '</div>' + '<div class=\"footer-notes\">Get icon names at <a href=\"https://fontawesome.com/icons\" target=\"_blank\">FontAwesome</a></div>' + '</div>' + '<div class=\"footer\">' + '<div class=\"buttons right last\">' + '<input type=\"button\" class=\"btn cancel\" value=\"' + Craft.t('app', 'Cancel') + '\">' + '<input type=\"submit\" class=\"btn submit\" value=\"' + Craft.t('app', 'Save') + '\"> ' + '<div class=\"spinner\" style=\"display: none;\"></div>' + '</div>' + '</div>' + '</form>';\n    var $container = $(containerHtml).appendTo(Garnish.$bod);\n    this.$heading = $container.find('h1:first');\n    this.$nameInput = $container.find('.group-input:first');\n    this.$iconInput = $container.find('.icon-input:first');\n    this.$saveBtn = $container.find('.submit:first');\n    this.$cancelBtn = $container.find('.cancel:first');\n    this.$spinner = $container.find('.spinner:first');\n\n    if (this.group) {\n      this.$heading.html(Craft.t('form-builder', 'Edit Group'));\n    } else {\n      this.$heading.html(Craft.t('form-builder', 'Create new group'));\n    }\n\n    this.base($container);\n    this.addListener(this.$container, 'submit', 'saveGroup');\n    this.addListener(this.$cancelBtn, 'click', 'cancel');\n  },\n  saveGroup: function saveGroup(event) {\n    event.preventDefault();\n\n    if (this.loading) {\n      return;\n    }\n\n    var data = {\n      id: this.group.id ? this.group.id : null,\n      name: this.$nameInput.val(),\n      settings: {\n        icon: {\n          name: this.$iconInput.val()\n        }\n      }\n    };\n    this.loading = true;\n    this.$saveBtn.addClass('active');\n    this.$spinner.show();\n    Craft.postActionRequest('form-builder/groups/save', data, $.proxy(function (response, textStatus) {\n      this.$saveBtn.removeClass('active');\n      this.$spinner.hide();\n      this.loading = false;\n\n      if (textStatus === 'success') {\n        if (response.success) {\n          // TODO: dynamically add new group to sources\n          // this.route.updateHtmlFromModal();\n          // this.hide();\n          Craft.cp.displayNotice(Craft.t('form-builder', 'Group saved.'));\n          location.href = Craft.getUrl('form-builder/forms');\n        } else if (response.errors) {\n          var errors = this.flattenErrors(response.errors);\n          alert(\"\".concat(Craft.t('form-builder', 'Could not create the group:'), \"\\n\\n\").concat(errors.join('\\n')));\n        } else {\n          Craft.cp.displayError();\n        }\n      }\n    }, this));\n  },\n  flattenErrors: function flattenErrors(responseErrors) {\n    var attribute;\n    var errors;\n    errors = [];\n\n    for (attribute in responseErrors) {\n      errors = errors.concat(responseErrors[attribute]);\n    }\n\n    return errors;\n  },\n  cancel: function cancel() {\n    this.hide();\n\n    if (this.group) {\n      this.group.modal = null;\n    }\n  }\n}); // TODO: Remove, unused anymore\n\nGroupModal = Garnish.Modal.extend({\n  group: null,\n  $form: null,\n  $modalInputs: null,\n  init: function init(group) {\n    var $input;\n    var $input2;\n    var body;\n    var iconName;\n    var label;\n    var title;\n    var self;\n    self = this;\n    this.group = group;\n    this.base();\n    this.$form = $('<form class=\"modal fitted formbuilder-modal\">').appendTo(Garnish.$bod);\n    this.setContainer(this.$form);\n    title = this.group.id ? Craft.t('form-builder', 'Edit Group') : Craft.t('form-builder', 'New Group');\n    body = $(['<header>', \"<span class=\\\"modal-title\\\">\".concat(title, \"</span>\"), '</header>', '<div class=\"body\"><div class=\"footer-notes\">Get icon names at <a href=\"https://fontawesome.com/icons\" target=\"_blank\">FontAwesome</a></div></div>', '<footer class=\"footer\">', '<div class=\"buttons\">', \"<input type=\\\"button\\\" class=\\\"btns btn-modal cancel\\\" value=\\\"\".concat(Craft.t('form-builder', 'Cancel'), \"\\\">\"), \"<input type=\\\"submit\\\" class=\\\"btns btn-modal submit\\\" value=\\\"\".concat(Craft.t('form-builder', 'Save'), \"\\\">\"), '</div>', '</footer>'].join('')).appendTo(this.$form);\n    label = this.group.label ? this.group.label : '';\n    iconName = this.group.iconName ? this.group.iconName : '';\n    $input = \"<input type='text' class='groupName' value='\".concat(label, \"' data-hint='NAME' data-name='groupName' />\");\n    $input2 = \"<input type='text' class='groupIcon' value='\".concat(iconName, \"' data-hint='ICON' data-name='groupIcon' />\");\n    this.renderInputs($input2, '', 'select', 'groupIcon', 'ICON', 'iconName');\n    this.renderInputs($input, '', 'text', 'groupName', 'NAME', 'groupName');\n    this.show();\n    this.$cancelBtn = body.find('.cancel');\n    this.addListener(this.$cancelBtn, 'click', 'hide');\n    this.addListener(this.$form, 'submit', 'save');\n  },\n  renderInputs: function renderInputs(el, value, type, name, hint, className) {\n    var $input;\n    $input = $(\"<div class=\\\"fb-field\\\"><div class=\\\"input-hint\\\">\".concat(hint, \"</div>\").concat(el, \"</div>\"));\n    this.$form.find('.body').prepend($input); // TODO: allow users to dynamically search fontawesome icon repository\n    // if (type == 'select') {\n    //     $input.select2({\n    //         ajax: {\n    //             url: Craft.getActionUrl() + '/form-builder/icons/get-all-icons',\n    //             dataType: 'json',\n    //             processResults: function(data) {\n    //                 return {\n    //                     results: data.icons\n    //                 };\n    //             },\n    //         },\n    //         placeholder: 'Select Icon',\n    //         escapeMarkup: function (markup) { return markup; },\n    //         templateResult: function(icon) {\n    //             let markup = `<div class='select2-result-icon clearfix'><div class='select2-result-image'><img src='${icon.icon}' /></div><div class='select2-result-icon-details'><div class='select2-result-name'>${icon.name}</div>`;\n    //             return markup;\n    //         },\n    //         templateSelection: function(data) {\n    //         }\n    //     });\n    // }\n  },\n  save: function save(e) {\n    e.preventDefault();\n    var data;\n    var groupIcon;\n    var groupName;\n    var inputLength;\n    var self;\n    self = this;\n    groupName = this.$form.find('.groupName').val();\n    groupIcon = this.$form.find('.groupIcon').val();\n    inputLength = this.$form.find('.groupName').val().length;\n\n    if (inputLength > 0) {\n      data = {\n        id: this.group.id ? this.group.id : null,\n        name: groupName,\n        settings: {\n          icon: {\n            name: groupIcon\n          }\n        }\n      };\n      Craft.postActionRequest('form-builder/groups/save', data, $.proxy(function (response, textStatus) {\n        var errors;\n        console.log(response);\n\n        if (textStatus === 'success') {\n          if (response.success) {\n            location.href = Craft.getUrl('form-builder/forms');\n          } else if (response.errors) {\n            errors = this.flattenErrors(response.errors);\n            alert(\"\".concat(Craft.t('form-builder', 'Could not create the group:'), \"\\n\\n\").concat(errors.join('\\n')));\n          } else {\n            Craft.cp.displayError();\n          }\n        }\n      }, this));\n    }\n  },\n  flattenErrors: function flattenErrors(responseErrors) {\n    var attribute;\n    var errors;\n    errors = [];\n\n    for (attribute in responseErrors) {\n      errors = errors.concat(responseErrors[attribute]);\n    }\n\n    return errors;\n  }\n});\nGarnish.$doc.ready(function () {\n  var FormGroups;\n  FormGroups = new Groups();\n  $.each($('.group-item'), function (i, item) {\n    return new GroupItem(item);\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./development/js/groups.js\n");

/***/ }),

/***/ 4:
/*!****************************************!*\
  !*** multi ./development/js/groups.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Users/owldesign/Formbuilder/plugins/formbuilder/development/js/groups.js */"./development/js/groups.js");


/***/ })

/******/ });