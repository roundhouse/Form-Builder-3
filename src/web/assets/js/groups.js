/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!**********************************!*\
  !*** ./development/js/groups.js ***!
  \**********************************/
eval("var GroupItem;\nvar GroupModal;\nvar Groups;\nGroups = Garnish.Base.extend({\n  $groups: null,\n  $selectedGroup: null,\n  $newGroupBtn: null,\n  modal: null,\n  init: function init() {\n    var $groupSettingsBtn;\n    var menuBtn;\n    this.$groups = $('#groups');\n    this.$selectedGroup = this.$groups.find('a.sel:first');\n    this.$newGroupBtn = $('#newgroupbtn');\n    this.addListener(this.$newGroupBtn, 'click', 'addNewGroup');\n    $groupSettingsBtn = $('#groupsettingsbtn');\n\n    if ($groupSettingsBtn.length) {\n      menuBtn = $groupSettingsBtn.data('menubtn');\n      menuBtn.settings.onOptionSelect = $.proxy(function (elem) {\n        var action;\n        action = $(elem).data('action');\n\n        switch (action) {\n          case 'rename':\n            this.renameSelectedGroup();\n\n          case 'delete':\n            this.deleteSelectedGroup();\n        }\n      }, this);\n    }\n  },\n  addNewGroup: function addNewGroup() {\n    if (!this.modal) {\n      this.modal = new GroupModal(this);\n    } else {\n      this.modal.show();\n    }\n  },\n  renameSelectedGroup: function renameSelectedGroup() {\n    var data;\n    var newName;\n    var oldName;\n    oldName = this.$selectedGroup.text();\n    newName = this.promptForGroupName(oldName);\n\n    if (newName && newName !== oldName) {\n      data = {\n        id: this.$selectedGroup.data('id'),\n        name: newName\n      };\n      Craft.postActionRequest('form-builder/groups/save', data, $.proxy(function (response, textStatus) {\n        var errors;\n\n        if (textStatus === 'success') {\n          if (response.success) {\n            this.$selectedGroup.text(response.group.name);\n            Craft.cp.displayNotice(Craft.t('form-builder', 'Group renamed.'));\n          } else if (response.errors) {\n            errors = this.flattenErrors(response.errors);\n            alert(\"\".concat(Craft.t('form-builder', 'Could not rename the group:'), \"\\n\\n\").concat(errors.join('\\n')));\n          } else {\n            Craft.cp.displayError();\n          }\n        }\n      }, this));\n    }\n  },\n  promptForGroupName: function promptForGroupName(oldName) {\n    prompt(Craft.t('form-builder', 'What do you want to name your group?'), oldName);\n  },\n  deleteSelectedGroup: function deleteSelectedGroup() {\n    var data;\n    this.$selectedGroup = $('#groups a.sel');\n\n    if (this.$selectedGroup.data('id') === 1) {\n      Craft.cp.displayError(Craft.t('form-builder', 'Cannot delete Default group'));\n    } else {\n      if (confirm(Craft.t('form-builder', 'Are you sure you want to delete this group and all its forms?'))) {\n        data = {\n          id: this.$selectedGroup.data('id')\n        };\n        Craft.postActionRequest('form-builder/groups/delete', data, $.proxy(function (response, textStatus) {\n          if (textStatus === 'success') {\n            if (response.success) {\n              location.href = Craft.getUrl('form-builder/forms');\n            } else {\n              Craft.cp.displayError();\n            }\n          }\n        }, this));\n      }\n    }\n  },\n  flattenErrors: function flattenErrors(responseErrors) {\n    var attribute;\n    var errors;\n    errors = [];\n\n    for (attribute in responseErrors) {\n      errors = errors.concat(responseErrors[attribute]);\n    }\n\n    return errors;\n  }\n});\nGroupItem = Garnish.Modal.extend({\n  $groupListItem: null,\n  $group: null,\n  $editGroupBtn: null,\n  id: null,\n  label: null,\n  iconName: null,\n  modal: null,\n  init: function init(el) {\n    this.$groupListItem = $(el);\n    this.$group = this.$groupListItem.find('a');\n    this.$editGroupBtn = this.$group.find('.edit-group');\n    this.id = this.$group.data('id');\n    this.label = this.$group.data('label');\n    this.iconName = this.$group.data('icon-name');\n    this.addListener(this.$editGroupBtn, 'click', 'edit');\n  },\n  edit: function edit() {\n    if (!this.modal) {\n      this.modal = new GroupModal(this);\n    } else {\n      this.modal.show();\n    }\n  }\n});\nGroupModal = Garnish.Modal.extend({\n  group: null,\n  $form: null,\n  $modalInputs: null,\n  init: function init(group) {\n    var $input;\n    var $input2;\n    var $icons;\n    var body;\n    var iconName;\n    var label;\n    var title;\n    var self;\n    self = this;\n    this.group = group;\n    this.base();\n    title = this.group.id ? Craft.t('form-builder', 'Edit Group') : Craft.t('form-builder', 'New Group');\n    this.$form = $('<form class=\"modal fitted formbuilder-modal\">').appendTo(Garnish.$bod);\n    this.setContainer(this.$form);\n    var $header = $('<div class=\"header\"/>').appendTo(this.$form).html(\"<h1>\".concat(title, \"</h1>\"));\n    var $body = $('<div class=\"body\"/>').appendTo(this.$form).html(\"<div class=\\\"footer-notes\\\">Use craft icon font names eg. \\\"list\\\"</a></div>\");\n    var $footer = $('<footer class=\"footer\"/>').appendTo(this.$form);\n    var $buttons = $('<div class=\"buttons right\"/>').appendTo($footer);\n    label = this.group.label ? this.group.label : '';\n    iconName = this.group.iconName ? this.group.iconName : '';\n    $input = \"<input type='text' class='groupName' value='\".concat(label, \"' id='groupName' />\");\n    $input2 = \"<input type='text' class='groupIcon' value='\".concat(iconName, \"' id='groupIcon' />\");\n    this.renderInputs($input2, '', 'select', 'groupIcon', 'Icon', 'groupIcon');\n    this.renderInputs($input, '', 'text', 'groupName', 'Name', 'groupName');\n    this.$cancelBtn = $('<button/>', {\n      type: 'button',\n      \"class\": 'btn',\n      text: Craft.t('form-builder', 'Cancel')\n    }).appendTo($buttons);\n    this.$saveBtn = $('<button/>', {\n      type: 'submit',\n      \"class\": 'btn submit',\n      text: Craft.t('form-builder', 'Save')\n    }).appendTo($buttons);\n    this.addListener(this.$cancelBtn, 'click', function () {\n      this.hide();\n    });\n    this.addListener(this.$form, 'submit', function (e) {\n      this.save(e);\n    });\n    this.show();\n  },\n  renderInputs: function renderInputs(el, value, type, name, hint, className) {\n    var $input;\n    $input = $(\"<div class=\\\"field\\\">\\n            <div class=\\\"heading\\\">\\n                <label for=\\\"\".concat(className, \"\\\">\").concat(hint, \"</label>\\n            </div>\\n            <div class=\\\"input\\\">\\n                <div class=\\\"text\\\">\").concat(el, \"</div>\\n            </div>\\n            </div>\"));\n    this.$form.find('.body').prepend($input);\n  },\n  save: function save(e) {\n    e.preventDefault();\n    var data;\n    var groupIcon;\n    var groupName;\n    var inputLength;\n    var self;\n    self = this;\n    groupName = this.$form.find('.groupName').val();\n    groupIcon = this.$form.find('.groupIcon').val();\n    inputLength = this.$form.find('.groupName').val().length;\n\n    if (inputLength > 0) {\n      data = {\n        id: this.group.id ? this.group.id : null,\n        name: groupName,\n        settings: {\n          icon: {\n            name: groupIcon\n          }\n        }\n      };\n      Craft.postActionRequest('form-builder/groups/save', data, $.proxy(function (response, textStatus) {\n        var errors;\n        console.log(response);\n\n        if (textStatus === 'success') {\n          if (response.success) {\n            location.href = Craft.getUrl('form-builder/forms');\n          } else if (response.errors) {\n            errors = this.flattenErrors(response.errors);\n            alert(\"\".concat(Craft.t('form-builder', 'Could not create the group:'), \"\\n\\n\").concat(errors.join('\\n')));\n          } else {\n            Craft.cp.displayError();\n          }\n        }\n      }, this));\n    } else {\n      Garnish.shake(this.$form);\n    }\n  },\n  flattenErrors: function flattenErrors(responseErrors) {\n    var attribute;\n    var errors;\n    errors = [];\n\n    for (attribute in responseErrors) {\n      errors = errors.concat(responseErrors[attribute]);\n    }\n\n    return errors;\n  }\n});\nGarnish.$doc.ready(function () {\n  var FormGroups;\n  FormGroups = new Groups();\n  $.each($('.group-item'), function (i, item) {\n    return new GroupItem(item);\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kZXZlbG9wbWVudC9qcy9ncm91cHMuanM/ODg5NSJdLCJuYW1lcyI6WyJHcm91cEl0ZW0iLCJHcm91cE1vZGFsIiwiR3JvdXBzIiwiR2FybmlzaCIsIkJhc2UiLCJleHRlbmQiLCIkZ3JvdXBzIiwiJHNlbGVjdGVkR3JvdXAiLCIkbmV3R3JvdXBCdG4iLCJtb2RhbCIsImluaXQiLCIkZ3JvdXBTZXR0aW5nc0J0biIsIm1lbnVCdG4iLCIkIiwiZmluZCIsImFkZExpc3RlbmVyIiwibGVuZ3RoIiwiZGF0YSIsInNldHRpbmdzIiwib25PcHRpb25TZWxlY3QiLCJwcm94eSIsImVsZW0iLCJhY3Rpb24iLCJyZW5hbWVTZWxlY3RlZEdyb3VwIiwiZGVsZXRlU2VsZWN0ZWRHcm91cCIsImFkZE5ld0dyb3VwIiwic2hvdyIsIm5ld05hbWUiLCJvbGROYW1lIiwidGV4dCIsInByb21wdEZvckdyb3VwTmFtZSIsImlkIiwibmFtZSIsIkNyYWZ0IiwicG9zdEFjdGlvblJlcXVlc3QiLCJyZXNwb25zZSIsInRleHRTdGF0dXMiLCJlcnJvcnMiLCJzdWNjZXNzIiwiZ3JvdXAiLCJjcCIsImRpc3BsYXlOb3RpY2UiLCJ0IiwiZmxhdHRlbkVycm9ycyIsImFsZXJ0Iiwiam9pbiIsImRpc3BsYXlFcnJvciIsInByb21wdCIsImNvbmZpcm0iLCJsb2NhdGlvbiIsImhyZWYiLCJnZXRVcmwiLCJyZXNwb25zZUVycm9ycyIsImF0dHJpYnV0ZSIsImNvbmNhdCIsIk1vZGFsIiwiJGdyb3VwTGlzdEl0ZW0iLCIkZ3JvdXAiLCIkZWRpdEdyb3VwQnRuIiwibGFiZWwiLCJpY29uTmFtZSIsImVsIiwiZWRpdCIsIiRmb3JtIiwiJG1vZGFsSW5wdXRzIiwiJGlucHV0IiwiJGlucHV0MiIsIiRpY29ucyIsImJvZHkiLCJ0aXRsZSIsInNlbGYiLCJiYXNlIiwiYXBwZW5kVG8iLCIkYm9kIiwic2V0Q29udGFpbmVyIiwiJGhlYWRlciIsImh0bWwiLCIkYm9keSIsIiRmb290ZXIiLCIkYnV0dG9ucyIsInJlbmRlcklucHV0cyIsIiRjYW5jZWxCdG4iLCJ0eXBlIiwiJHNhdmVCdG4iLCJoaWRlIiwiZSIsInNhdmUiLCJ2YWx1ZSIsImhpbnQiLCJjbGFzc05hbWUiLCJwcmVwZW5kIiwicHJldmVudERlZmF1bHQiLCJncm91cEljb24iLCJncm91cE5hbWUiLCJpbnB1dExlbmd0aCIsInZhbCIsImljb24iLCJjb25zb2xlIiwibG9nIiwic2hha2UiLCIkZG9jIiwicmVhZHkiLCJGb3JtR3JvdXBzIiwiZWFjaCIsImkiLCJpdGVtIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxTQUFKO0FBQ0EsSUFBSUMsVUFBSjtBQUNBLElBQUlDLE1BQUo7QUFFQUEsTUFBTSxHQUFHQyxPQUFPLENBQUNDLElBQVIsQ0FBYUMsTUFBYixDQUFvQjtBQUN6QkMsRUFBQUEsT0FBTyxFQUFFLElBRGdCO0FBRXpCQyxFQUFBQSxjQUFjLEVBQUUsSUFGUztBQUd6QkMsRUFBQUEsWUFBWSxFQUFFLElBSFc7QUFJekJDLEVBQUFBLEtBQUssRUFBRSxJQUprQjtBQU16QkMsRUFBQUEsSUFOeUIsa0JBTWxCO0FBQ0gsUUFBSUMsaUJBQUo7QUFDQSxRQUFJQyxPQUFKO0FBRUEsU0FBS04sT0FBTCxHQUFlTyxDQUFDLENBQUMsU0FBRCxDQUFoQjtBQUNBLFNBQUtOLGNBQUwsR0FBc0IsS0FBS0QsT0FBTCxDQUFhUSxJQUFiLENBQWtCLGFBQWxCLENBQXRCO0FBQ0EsU0FBS04sWUFBTCxHQUFvQkssQ0FBQyxDQUFDLGNBQUQsQ0FBckI7QUFDQSxTQUFLRSxXQUFMLENBQWlCLEtBQUtQLFlBQXRCLEVBQW9DLE9BQXBDLEVBQTZDLGFBQTdDO0FBRUFHLElBQUFBLGlCQUFpQixHQUFHRSxDQUFDLENBQUMsbUJBQUQsQ0FBckI7O0FBRUEsUUFBSUYsaUJBQWlCLENBQUNLLE1BQXRCLEVBQThCO0FBQzFCSixNQUFBQSxPQUFPLEdBQUdELGlCQUFpQixDQUFDTSxJQUFsQixDQUF1QixTQUF2QixDQUFWO0FBQ0FMLE1B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QUNILFdBSE0sTUFHQTtBQUNIWixZQUFBQSxLQUFLLENBQUNPLEVBQU4sQ0FBU00sWUFBVDtBQUNIO0FBQ0o7QUFDSixPQWJ5RCxFQWF0RCxJQWJzRCxDQUExRDtBQWNILEtBekJELE1BeUJPO0FBQ0gzQyxNQUFBQSxPQUFPLENBQUNnRyxLQUFSLENBQWMsS0FBS3BDLEtBQW5CO0FBQ0g7QUFDSixHQWpINkI7QUFtSDlCcEIsRUFBQUEsYUFuSDhCLHlCQW1IaEJTLGNBbkhnQixFQW1IQTtBQUMxQixRQUFJQyxTQUFKO0FBQ0EsUUFBSWhCLE1BQUo7QUFDQUEsSUFBQUEsTUFBTSxHQUFHLEVBQVQ7O0FBRUEsU0FBS2dCLFNBQUwsSUFBa0JELGNBQWxCLEVBQWtDO0FBQzlCZixNQUFBQSxNQUFNLEdBQUdBLE1BQU0sQ0FBQ2lCLE1BQVAsQ0FBY0YsY0FBYyxDQUFDQyxTQUFELENBQTVCLENBQVQ7QUFDSDs7QUFFRCxXQUFPaEIsTUFBUDtBQUNIO0FBN0g2QixDQUFyQixDQUFiO0FBZ0lBbEMsT0FBTyxDQUFDaUcsSUFBUixDQUFhQyxLQUFiLENBQW1CLFlBQU07QUFDckIsTUFBSUMsVUFBSjtBQUNBQSxFQUFBQSxVQUFVLEdBQUcsSUFBSXBHLE1BQUosRUFBYjtBQUNBVyxFQUFBQSxDQUFDLENBQUMwRixJQUFGLENBQU8xRixDQUFDLENBQUMsYUFBRCxDQUFSLEVBQXlCLFVBQUMyRixDQUFELEVBQUlDLElBQUo7QUFBQSxXQUFhLElBQUl6RyxTQUFKLENBQWN5RyxJQUFkLENBQWI7QUFBQSxHQUF6QjtBQUNILENBSkQiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgR3JvdXBJdGVtO1xubGV0IEdyb3VwTW9kYWw7XG5sZXQgR3JvdXBzO1xuXG5Hcm91cHMgPSBHYXJuaXNoLkJhc2UuZXh0ZW5kKHtcbiAgICAkZ3JvdXBzOiBudWxsLFxuICAgICRzZWxlY3RlZEdyb3VwOiBudWxsLFxuICAgICRuZXdHcm91cEJ0bjogbnVsbCxcbiAgICBtb2RhbDogbnVsbCxcblxuICAgIGluaXQoKSB7XG4gICAgICAgIGxldCAkZ3JvdXBTZXR0aW5nc0J0bjtcbiAgICAgICAgbGV0IG1lbnVCdG47XG5cbiAgICAgICAgdGhpcy4kZ3JvdXBzID0gJCgnI2dyb3VwcycpO1xuICAgICAgICB0aGlzLiRzZWxlY3RlZEdyb3VwID0gdGhpcy4kZ3JvdXBzLmZpbmQoJ2Euc2VsOmZpcnN0Jyk7XG4gICAgICAgIHRoaXMuJG5ld0dyb3VwQnRuID0gJCgnI25ld2dyb3VwYnRuJyk7XG4gICAgICAgIHRoaXMuYWRkTGlzdGVuZXIodGhpcy4kbmV3R3JvdXBCdG4sICdjbGljaycsICdhZGROZXdHcm91cCcpO1xuXG4gICAgICAgICRncm91cFNldHRpbmdzQnRuID0gJCgnI2dyb3Vwc2V0dGluZ3NidG4nKTtcblxuICAgICAgICBpZiAoJGdyb3VwU2V0dGluZ3NCdG4ubGVuZ3RoKSB7XG4gICAgICAgICAgICBtZW51QnRuID0gJGdyb3VwU2V0dGluZ3NCdG4uZGF0YSgnbWVudWJ0bicpO1xuICAgICAgICAgICAgbWVudUJ0bi5zZXR0aW5ncy5vbk9wdGlvblNlbGVjdCA9ICQucHJveHkoKGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICAgICAgICAgICAgbGV0IGFjdGlvbjtcbiAgICAgICAgICAgICAgICBhY3Rpb24gPSAkKGVsZW0pLmRhdGEoJ2FjdGlvbicpO1xuXG4gICAgICAgICAgICAgICAgc3dpdGNoIChhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncmVuYW1lJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVuYW1lU2VsZWN0ZWRHcm91cCgpO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdkZWxldGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWxldGVTZWxlY3RlZEdyb3VwKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksIHRoaXMpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGFkZE5ld0dyb3VwKCkge1xuICAgICAgICBpZiAoIXRoaXMubW9kYWwpIHtcbiAgICAgICAgICAgIHRoaXMubW9kYWwgPSBuZXcgR3JvdXBNb2RhbCh0aGlzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubW9kYWwuc2hvdygpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJlbmFtZVNlbGVjdGVkR3JvdXAoKSB7XG4gICAgICAgIGxldCBkYXRhO1xuICAgICAgICBsZXQgbmV3TmFtZTtcbiAgICAgICAgbGV0IG9sZE5hbWU7XG5cbiAgICAgICAgb2xkTmFtZSA9IHRoaXMuJHNlbGVjdGVkR3JvdXAudGV4dCgpO1xuICAgICAgICBuZXdOYW1lID0gdGhpcy5wcm9tcHRGb3JHcm91cE5hbWUob2xkTmFtZSk7XG5cbiAgICAgICAgaWYgKG5ld05hbWUgJiYgbmV3TmFtZSAhPT0gb2xkTmFtZSkge1xuICAgICAgICAgICAgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICBpZDogdGhpcy4kc2VsZWN0ZWRHcm91cC5kYXRhKCdpZCcpLFxuICAgICAgICAgICAgICAgIG5hbWU6IG5ld05hbWVcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIENyYWZ0LnBvc3RBY3Rpb25SZXF1ZXN0KCdmb3JtLWJ1aWxkZXIvZ3JvdXBzL3NhdmUnLCBkYXRhLCAkLnByb3h5KChmdW5jdGlvbiAocmVzcG9uc2UsIHRleHRTdGF0dXMpIHtcbiAgICAgICAgICAgICAgICBsZXQgZXJyb3JzO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRleHRTdGF0dXMgPT09ICdzdWNjZXNzJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kc2VsZWN0ZWRHcm91cC50ZXh0KHJlc3BvbnNlLmdyb3VwLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgQ3JhZnQuY3AuZGlzcGxheU5vdGljZShDcmFmdC50KCdmb3JtLWJ1aWxkZXInLCAnR3JvdXAgcmVuYW1lZC4nKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSB0aGlzLmZsYXR0ZW5FcnJvcnMocmVzcG9uc2UuZXJyb3JzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KGAke0NyYWZ0LnQoJ2Zvcm0tYnVpbGRlcicsICdDb3VsZCBub3QgcmVuYW1lIHRoZSBncm91cDonKX1cXG5cXG4ke2Vycm9ycy5qb2luKCdcXG4nKX1gKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENyYWZ0LmNwLmRpc3BsYXlFcnJvcigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksIHRoaXMpKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBwcm9tcHRGb3JHcm91cE5hbWUob2xkTmFtZSkge1xuICAgICAgICBwcm9tcHQoQ3JhZnQudCgnZm9ybS1idWlsZGVyJywgJ1doYXQgZG8geW91IHdhbnQgdG8gbmFtZSB5b3VyIGdyb3VwPycpLCBvbGROYW1lKTtcbiAgICB9LFxuXG4gICAgZGVsZXRlU2VsZWN0ZWRHcm91cCgpIHtcbiAgICAgICAgbGV0IGRhdGE7XG4gICAgICAgIHRoaXMuJHNlbGVjdGVkR3JvdXAgPSAkKCcjZ3JvdXBzIGEuc2VsJyk7XG5cbiAgICAgICAgaWYgKHRoaXMuJHNlbGVjdGVkR3JvdXAuZGF0YSgnaWQnKSA9PT0gMSkge1xuICAgICAgICAgICAgQ3JhZnQuY3AuZGlzcGxheUVycm9yKENyYWZ0LnQoJ2Zvcm0tYnVpbGRlcicsICdDYW5ub3QgZGVsZXRlIERlZmF1bHQgZ3JvdXAnKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoY29uZmlybShDcmFmdC50KCdmb3JtLWJ1aWxkZXInLCAnQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlbGV0ZSB0aGlzIGdyb3VwIGFuZCBhbGwgaXRzIGZvcm1zPycpKSkge1xuICAgICAgICAgICAgICAgIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiB0aGlzLiRzZWxlY3RlZEdyb3VwLmRhdGEoJ2lkJylcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgQ3JhZnQucG9zdEFjdGlvblJlcXVlc3QoJ2Zvcm0tYnVpbGRlci9ncm91cHMvZGVsZXRlJywgZGF0YSwgJC5wcm94eSgoKHJlc3BvbnNlLCB0ZXh0U3RhdHVzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZXh0U3RhdHVzID09PSAnc3VjY2VzcycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24uaHJlZiA9IENyYWZ0LmdldFVybCgnZm9ybS1idWlsZGVyL2Zvcm1zJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENyYWZ0LmNwLmRpc3BsYXlFcnJvcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSksIHRoaXMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBmbGF0dGVuRXJyb3JzKHJlc3BvbnNlRXJyb3JzKSB7XG4gICAgICAgIGxldCBhdHRyaWJ1dGU7XG4gICAgICAgIGxldCBlcnJvcnM7XG4gICAgICAgIGVycm9ycyA9IFtdO1xuXG4gICAgICAgIGZvciAoYXR0cmlidXRlIGluIHJlc3BvbnNlRXJyb3JzKSB7XG4gICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMuY29uY2F0KHJlc3BvbnNlRXJyb3JzW2F0dHJpYnV0ZV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVycm9ycztcbiAgICB9XG59KTtcblxuR3JvdXBJdGVtID0gR2FybmlzaC5Nb2RhbC5leHRlbmQoe1xuICAgICRncm91cExpc3RJdGVtOiBudWxsLFxuICAgICRncm91cDogbnVsbCxcbiAgICAkZWRpdEdyb3VwQnRuOiBudWxsLFxuICAgIGlkOiBudWxsLFxuICAgIGxhYmVsOiBudWxsLFxuICAgIGljb25OYW1lOiBudWxsLFxuICAgIG1vZGFsOiBudWxsLFxuXG4gICAgaW5pdChlbCkge1xuICAgICAgICB0aGlzLiRncm91cExpc3RJdGVtID0gJChlbCk7XG4gICAgICAgIHRoaXMuJGdyb3VwID0gdGhpcy4kZ3JvdXBMaXN0SXRlbS5maW5kKCdhJyk7XG4gICAgICAgIHRoaXMuJGVkaXRHcm91cEJ0biA9IHRoaXMuJGdyb3VwLmZpbmQoJy5lZGl0LWdyb3VwJyk7XG4gICAgICAgIHRoaXMuaWQgPSB0aGlzLiRncm91cC5kYXRhKCdpZCcpO1xuICAgICAgICB0aGlzLmxhYmVsID0gdGhpcy4kZ3JvdXAuZGF0YSgnbGFiZWwnKTtcbiAgICAgICAgdGhpcy5pY29uTmFtZSA9IHRoaXMuJGdyb3VwLmRhdGEoJ2ljb24tbmFtZScpO1xuICAgICAgICB0aGlzLmFkZExpc3RlbmVyKHRoaXMuJGVkaXRHcm91cEJ0biwgJ2NsaWNrJywgJ2VkaXQnKTtcbiAgICB9LFxuXG4gICAgZWRpdCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLm1vZGFsKSB7XG4gICAgICAgICAgICB0aGlzLm1vZGFsID0gbmV3IEdyb3VwTW9kYWwodGhpcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1vZGFsLnNob3coKTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG5Hcm91cE1vZGFsID0gR2FybmlzaC5Nb2RhbC5leHRlbmQoe1xuICAgIGdyb3VwOiBudWxsLFxuICAgICRmb3JtOiBudWxsLFxuICAgICRtb2RhbElucHV0czogbnVsbCxcbiAgICBpbml0KGdyb3VwKSB7XG4gICAgICAgIGxldCAkaW5wdXQ7XG4gICAgICAgIGxldCAkaW5wdXQyO1xuICAgICAgICBsZXQgJGljb25zO1xuICAgICAgICBsZXQgYm9keTtcbiAgICAgICAgbGV0IGljb25OYW1lO1xuICAgICAgICBsZXQgbGFiZWw7XG4gICAgICAgIGxldCB0aXRsZTtcbiAgICAgICAgbGV0IHNlbGY7XG5cbiAgICAgICAgc2VsZiA9IHRoaXM7XG4gICAgICAgIHRoaXMuZ3JvdXAgPSBncm91cDtcbiAgICAgICAgdGhpcy5iYXNlKCk7XG5cbiAgICAgICAgdGl0bGUgPSB0aGlzLmdyb3VwLmlkID8gQ3JhZnQudCgnZm9ybS1idWlsZGVyJywgJ0VkaXQgR3JvdXAnKSA6IENyYWZ0LnQoJ2Zvcm0tYnVpbGRlcicsICdOZXcgR3JvdXAnKTtcblxuICAgICAgICB0aGlzLiRmb3JtID0gJCgnPGZvcm0gY2xhc3M9XCJtb2RhbCBmaXR0ZWQgZm9ybWJ1aWxkZXItbW9kYWxcIj4nKS5hcHBlbmRUbyhHYXJuaXNoLiRib2QpO1xuICAgICAgICB0aGlzLnNldENvbnRhaW5lcih0aGlzLiRmb3JtKVxuICAgICAgICBsZXQgJGhlYWRlciA9ICQoJzxkaXYgY2xhc3M9XCJoZWFkZXJcIi8+JykuYXBwZW5kVG8odGhpcy4kZm9ybSkuaHRtbChgPGgxPiR7dGl0bGV9PC9oMT5gKVxuICAgICAgICBsZXQgJGJvZHkgPSAkKCc8ZGl2IGNsYXNzPVwiYm9keVwiLz4nKS5hcHBlbmRUbyh0aGlzLiRmb3JtKS5odG1sKGA8ZGl2IGNsYXNzPVwiZm9vdGVyLW5vdGVzXCI+VXNlIGNyYWZ0IGljb24gZm9udCBuYW1lcyBlZy4gXCJsaXN0XCI8L2E+PC9kaXY+YClcbiAgICAgICAgbGV0ICRmb290ZXIgPSAkKCc8Zm9vdGVyIGNsYXNzPVwiZm9vdGVyXCIvPicpLmFwcGVuZFRvKHRoaXMuJGZvcm0pXG4gICAgICAgIGxldCAkYnV0dG9ucyA9ICQoJzxkaXYgY2xhc3M9XCJidXR0b25zIHJpZ2h0XCIvPicpLmFwcGVuZFRvKCRmb290ZXIpXG5cbiAgICAgICAgbGFiZWwgPSB0aGlzLmdyb3VwLmxhYmVsID8gdGhpcy5ncm91cC5sYWJlbCA6ICcnO1xuICAgICAgICBpY29uTmFtZSA9IHRoaXMuZ3JvdXAuaWNvbk5hbWUgPyB0aGlzLmdyb3VwLmljb25OYW1lIDogJyc7XG5cbiAgICAgICAgJGlucHV0ID0gYDxpbnB1dCB0eXBlPSd0ZXh0JyBjbGFzcz0nZ3JvdXBOYW1lJyB2YWx1ZT0nJHtsYWJlbH0nIGlkPSdncm91cE5hbWUnIC8+YDtcbiAgICAgICAgJGlucHV0MiA9IGA8aW5wdXQgdHlwZT0ndGV4dCcgY2xhc3M9J2dyb3VwSWNvbicgdmFsdWU9JyR7aWNvbk5hbWV9JyBpZD0nZ3JvdXBJY29uJyAvPmA7XG5cbiAgICAgICAgdGhpcy5yZW5kZXJJbnB1dHMoJGlucHV0MiwgJycsICdzZWxlY3QnLCAnZ3JvdXBJY29uJywgJ0ljb24nLCAnZ3JvdXBJY29uJyk7XG4gICAgICAgIHRoaXMucmVuZGVySW5wdXRzKCRpbnB1dCwgJycsICd0ZXh0JywgJ2dyb3VwTmFtZScsICdOYW1lJywgJ2dyb3VwTmFtZScpO1xuXG4gICAgICAgIHRoaXMuJGNhbmNlbEJ0biA9ICQoJzxidXR0b24vPicsIHtcbiAgICAgICAgICAgIHR5cGU6ICdidXR0b24nLFxuICAgICAgICAgICAgY2xhc3M6ICdidG4nLFxuICAgICAgICAgICAgdGV4dDogQ3JhZnQudCgnZm9ybS1idWlsZGVyJywgJ0NhbmNlbCcpLFxuICAgICAgICB9KS5hcHBlbmRUbygkYnV0dG9ucylcblxuICAgICAgICB0aGlzLiRzYXZlQnRuID0gJCgnPGJ1dHRvbi8+Jywge1xuICAgICAgICAgICAgdHlwZTogJ3N1Ym1pdCcsXG4gICAgICAgICAgICBjbGFzczogJ2J0biBzdWJtaXQnLFxuICAgICAgICAgICAgdGV4dDogQ3JhZnQudCgnZm9ybS1idWlsZGVyJywgJ1NhdmUnKSxcbiAgICAgICAgfSkuYXBwZW5kVG8oJGJ1dHRvbnMpXG5cbiAgICAgICAgdGhpcy5hZGRMaXN0ZW5lcih0aGlzLiRjYW5jZWxCdG4sICdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5oaWRlKClcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hZGRMaXN0ZW5lcih0aGlzLiRmb3JtLCAnc3VibWl0JywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdGhpcy5zYXZlKGUpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuc2hvdygpO1xuICAgIH0sXG5cbiAgICByZW5kZXJJbnB1dHMoZWwsIHZhbHVlLCB0eXBlLCBuYW1lLCBoaW50LCBjbGFzc05hbWUpIHtcbiAgICAgICAgbGV0ICRpbnB1dDtcbiAgICAgICAgJGlucHV0ID0gJChgPGRpdiBjbGFzcz1cImZpZWxkXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaGVhZGluZ1wiPlxuICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCIke2NsYXNzTmFtZX1cIj4ke2hpbnR9PC9sYWJlbD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRleHRcIj4ke2VsfTwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5gKTtcblxuICAgICAgICB0aGlzLiRmb3JtLmZpbmQoJy5ib2R5JykucHJlcGVuZCgkaW5wdXQpO1xuICAgIH0sXG5cbiAgICBzYXZlKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBsZXQgZGF0YTtcbiAgICAgICAgbGV0IGdyb3VwSWNvbjtcbiAgICAgICAgbGV0IGdyb3VwTmFtZTtcbiAgICAgICAgbGV0IGlucHV0TGVuZ3RoO1xuICAgICAgICBsZXQgc2VsZjtcblxuICAgICAgICBzZWxmID0gdGhpcztcbiAgICAgICAgZ3JvdXBOYW1lID0gdGhpcy4kZm9ybS5maW5kKCcuZ3JvdXBOYW1lJykudmFsKCk7XG4gICAgICAgIGdyb3VwSWNvbiA9IHRoaXMuJGZvcm0uZmluZCgnLmdyb3VwSWNvbicpLnZhbCgpO1xuICAgICAgICBpbnB1dExlbmd0aCA9IHRoaXMuJGZvcm0uZmluZCgnLmdyb3VwTmFtZScpLnZhbCgpLmxlbmd0aDtcbiAgICAgICAgaWYgKGlucHV0TGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICBpZDogdGhpcy5ncm91cC5pZCA/IHRoaXMuZ3JvdXAuaWQgOiBudWxsLFxuICAgICAgICAgICAgICAgIG5hbWU6IGdyb3VwTmFtZSxcbiAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICBpY29uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBncm91cEljb25cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIENyYWZ0LnBvc3RBY3Rpb25SZXF1ZXN0KCdmb3JtLWJ1aWxkZXIvZ3JvdXBzL3NhdmUnLCBkYXRhLCAkLnByb3h5KChmdW5jdGlvbiAocmVzcG9uc2UsIHRleHRTdGF0dXMpIHtcbiAgICAgICAgICAgICAgICBsZXQgZXJyb3JzO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICBpZiAodGV4dFN0YXR1cyA9PT0gJ3N1Y2Nlc3MnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5ocmVmID0gQ3JhZnQuZ2V0VXJsKCdmb3JtLWJ1aWxkZXIvZm9ybXMnKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5lcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IHRoaXMuZmxhdHRlbkVycm9ycyhyZXNwb25zZS5lcnJvcnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoYCR7Q3JhZnQudCgnZm9ybS1idWlsZGVyJywgJ0NvdWxkIG5vdCBjcmVhdGUgdGhlIGdyb3VwOicpfVxcblxcbiR7ZXJyb3JzLmpvaW4oJ1xcbicpfWApO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ3JhZnQuY3AuZGlzcGxheUVycm9yKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSwgdGhpcykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgR2FybmlzaC5zaGFrZSh0aGlzLiRmb3JtKVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGZsYXR0ZW5FcnJvcnMocmVzcG9uc2VFcnJvcnMpIHtcbiAgICAgICAgbGV0IGF0dHJpYnV0ZTtcbiAgICAgICAgbGV0IGVycm9ycztcbiAgICAgICAgZXJyb3JzID0gW107XG5cbiAgICAgICAgZm9yIChhdHRyaWJ1dGUgaW4gcmVzcG9uc2VFcnJvcnMpIHtcbiAgICAgICAgICAgIGVycm9ycyA9IGVycm9ycy5jb25jYXQocmVzcG9uc2VFcnJvcnNbYXR0cmlidXRlXSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZXJyb3JzO1xuICAgIH1cbn0pO1xuXG5HYXJuaXNoLiRkb2MucmVhZHkoKCkgPT4ge1xuICAgIGxldCBGb3JtR3JvdXBzO1xuICAgIEZvcm1Hcm91cHMgPSBuZXcgR3JvdXBzO1xuICAgICQuZWFjaCgkKCcuZ3JvdXAtaXRlbScpLCAoaSwgaXRlbSkgPT4gbmV3IEdyb3VwSXRlbShpdGVtKSk7XG59KTsiXSwiZmlsZSI6Ii4vZGV2ZWxvcG1lbnQvanMvZ3JvdXBzLmpzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./development/js/groups.js\n");
/******/ })()
;